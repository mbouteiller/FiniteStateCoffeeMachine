/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.basiccoffeecontroller;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;

public class BasicCoffeeControllerStatemachine implements IBasicCoffeeControllerStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private SCInterfaceOperationCallback operationCallback;
		
		public synchronized void setSCInterfaceOperationCallback(
				SCInterfaceOperationCallback operationCallback) {
			this.operationCallback = operationCallback;
		}
		private boolean chose;
		
		
		public void raiseChose() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				chose = true;
			}
		}
		
		private boolean moneyGiven;
		
		
		public void raiseMoneyGiven() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				moneyGiven = true;
			}
		}
		
		private boolean any;
		
		
		public void raiseAny() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				any = true;
			}
		}
		
		private boolean cancel;
		
		
		public void raiseCancel() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				cancel = true;
			}
		}
		
		private boolean takeOrder;
		
		
		public void raiseTakeOrder() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				takeOrder = true;
			}
		}
		
		private boolean reset;
		
		
		public void raiseReset() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				reset = true;
			}
		}
		
		private boolean finish;
		
		
		public void raiseFinish() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				finish = true;
			}
		}
		
		private boolean pay;
		
		
		public boolean isRaisedPay() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return pay;
			}
		}
		
		protected void raisePay() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				pay = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPayRaised();
				}
			}
		}
		
		private boolean refund;
		
		
		public boolean isRaisedRefund() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return refund;
			}
		}
		
		protected void raiseRefund() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				refund = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onRefundRaised();
				}
			}
		}
		
		private boolean giveChange;
		
		
		public boolean isRaisedGiveChange() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return giveChange;
			}
		}
		
		protected void raiseGiveChange() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				giveChange = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGiveChangeRaised();
				}
			}
		}
		
		private boolean startRecipe;
		
		
		public boolean isRaisedStartRecipe() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return startRecipe;
			}
		}
		
		protected void raiseStartRecipe() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				startRecipe = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onStartRecipeRaised();
				}
			}
		}
		
		private boolean timesup;
		
		
		public boolean isRaisedTimesup() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return timesup;
			}
		}
		
		protected void raiseTimesup() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				timesup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onTimesupRaised();
				}
			}
		}
		
		private boolean orderVerified;
		
		
		public boolean isRaisedOrderVerified() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return orderVerified;
			}
		}
		
		protected void raiseOrderVerified() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				orderVerified = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onOrderVerifiedRaised();
				}
			}
		}
		
		private boolean restart;
		
		
		public boolean isRaisedRestart() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return restart;
			}
		}
		
		protected void raiseRestart() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				restart = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onRestartRaised();
				}
			}
		}
		
		private boolean waitTakeOrder;
		
		
		public boolean isRaisedWaitTakeOrder() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return waitTakeOrder;
			}
		}
		
		protected void raiseWaitTakeOrder() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				waitTakeOrder = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onWaitTakeOrderRaised();
				}
			}
		}
		
		private String choice;
		
		public synchronized String getChoice() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return choice;
			}
		}
		
		public void setChoice(String value) {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				this.choice = value;
			}
		}
		
		private long price;
		
		public synchronized long getPrice() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return price;
			}
		}
		
		public void setPrice(long value) {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				this.price = value;
			}
		}
		
		private long money;
		
		public synchronized long getMoney() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return money;
			}
		}
		
		public void setMoney(long value) {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				this.money = value;
			}
		}
		
		private long sucre;
		
		public synchronized long getSucre() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return sucre;
			}
		}
		
		public void setSucre(long value) {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				this.sucre = value;
			}
		}
		
		private long taille;
		
		public synchronized long getTaille() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return taille;
			}
		}
		
		public void setTaille(long value) {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				this.taille = value;
			}
		}
		
		private long temperature;
		
		public synchronized long getTemperature() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return temperature;
			}
		}
		
		public void setTemperature(long value) {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				this.temperature = value;
			}
		}
		
		protected void clearEvents() {
			chose = false;
			moneyGiven = false;
			any = false;
			cancel = false;
			takeOrder = false;
			reset = false;
			finish = false;
		}
		protected void clearOutEvents() {
		
		pay = false;
		refund = false;
		giveChange = false;
		startRecipe = false;
		timesup = false;
		orderVerified = false;
		restart = false;
		waitTakeOrder = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Main,
		main_region_Main_choice_Initial,
		main_region_Main_choice_Chosen,
		main_region_Main_payment_Paid,
		main_region_Main_payment_NotPaid,
		main_region_Main_activity_Absent,
		main_region_Main_activity_Present,
		main_region_Start,
		main_region_Step1,
		main_region_Step1_r4_PositionnementSachet,
		main_region_Step1_r4_WaitPositionnementSachet,
		main_region_Step1_r1_PositionnementDosette,
		main_region_Step1_r1_WaitPositionnementDosette,
		main_region_Step1_r2_ChauffageEau,
		main_region_Step1_r2_WaitChauffageEau,
		main_region_Step1_r3_BroyageGrains,
		main_region_Step1_r3_WaitBroyageGrains,
		main_region_Step2,
		main_region_Step2_r1_PositionnementGobelet,
		main_region_Step2_r1_WaitPositionnementGobelet,
		main_region_Step2_r2_BonneTemperature,
		main_region_Step2_r2_WaitBonneTemperature,
		main_region_Step2_r3_TassageGrains,
		main_region_Step2_r3_WaitTassageGrains,
		main_region_Step3,
		main_region_Step3_r1_Sucre,
		main_region_Step3_r1_WaitSucre,
		main_region_Step3_r2_EcoulementEau,
		main_region_Step3_r2_WaitEcoulementEau,
		main_region_Else,
		main_region_AttenteRecuperation,
		main_region_AttenteInfusion,
		main_region_RetraitSachet,
		$NullState$
	};
	
	private final State[] stateVector = new State[4];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[15];
	
	public BasicCoffeeControllerStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		if (this.sCInterface.operationCallback == null) {
			throw new IllegalStateException("Operation callback for interface sCInterface must be set.");
		}
		
		for (int i = 0; i < 4; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setChoice("");
		
		sCInterface.setPrice(0);
		
		sCInterface.setMoney(0);
		
		sCInterface.setSucre(0);
		
		sCInterface.setTaille(0);
		
		sCInterface.setTemperature(0);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		clearOutEvents();
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Main_choice_Initial:
				main_region_Main_choice_Initial_react(true);
				break;
			case main_region_Main_choice_Chosen:
				main_region_Main_choice_Chosen_react(true);
				break;
			case main_region_Main_payment_Paid:
				main_region_Main_payment_Paid_react(true);
				break;
			case main_region_Main_payment_NotPaid:
				main_region_Main_payment_NotPaid_react(true);
				break;
			case main_region_Main_activity_Absent:
				main_region_Main_activity_Absent_react(true);
				break;
			case main_region_Main_activity_Present:
				main_region_Main_activity_Present_react(true);
				break;
			case main_region_Start:
				main_region_Start_react(true);
				break;
			case main_region_Step1_r4_PositionnementSachet:
				main_region_Step1_r4_PositionnementSachet_react(true);
				break;
			case main_region_Step1_r4_WaitPositionnementSachet:
				main_region_Step1_r4_WaitPositionnementSachet_react(true);
				break;
			case main_region_Step1_r1_PositionnementDosette:
				main_region_Step1_r1_PositionnementDosette_react(true);
				break;
			case main_region_Step1_r1_WaitPositionnementDosette:
				main_region_Step1_r1_WaitPositionnementDosette_react(true);
				break;
			case main_region_Step1_r2_ChauffageEau:
				main_region_Step1_r2_ChauffageEau_react(true);
				break;
			case main_region_Step1_r2_WaitChauffageEau:
				main_region_Step1_r2_WaitChauffageEau_react(true);
				break;
			case main_region_Step1_r3_BroyageGrains:
				main_region_Step1_r3_BroyageGrains_react(true);
				break;
			case main_region_Step1_r3_WaitBroyageGrains:
				main_region_Step1_r3_WaitBroyageGrains_react(true);
				break;
			case main_region_Step2_r1_PositionnementGobelet:
				main_region_Step2_r1_PositionnementGobelet_react(true);
				break;
			case main_region_Step2_r1_WaitPositionnementGobelet:
				main_region_Step2_r1_WaitPositionnementGobelet_react(true);
				break;
			case main_region_Step2_r2_BonneTemperature:
				main_region_Step2_r2_BonneTemperature_react(true);
				break;
			case main_region_Step2_r2_WaitBonneTemperature:
				main_region_Step2_r2_WaitBonneTemperature_react(true);
				break;
			case main_region_Step2_r3_TassageGrains:
				main_region_Step2_r3_TassageGrains_react(true);
				break;
			case main_region_Step2_r3_WaitTassageGrains:
				main_region_Step2_r3_WaitTassageGrains_react(true);
				break;
			case main_region_Step3_r1_Sucre:
				main_region_Step3_r1_Sucre_react(true);
				break;
			case main_region_Step3_r1_WaitSucre:
				main_region_Step3_r1_WaitSucre_react(true);
				break;
			case main_region_Step3_r2_EcoulementEau:
				main_region_Step3_r2_EcoulementEau_react(true);
				break;
			case main_region_Step3_r2_WaitEcoulementEau:
				main_region_Step3_r2_WaitEcoulementEau_react(true);
				break;
			case main_region_Else:
				main_region_Else_react(true);
				break;
			case main_region_AttenteRecuperation:
				main_region_AttenteRecuperation_react(true);
				break;
			case main_region_AttenteInfusion:
				main_region_AttenteInfusion_react(true);
				break;
			case main_region_RetraitSachet:
				main_region_RetraitSachet_react(true);
				break;
			default:
				// $NullState$
			}
		}
		clearEvents();
	}
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$||stateVector[3] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Main:
			return stateVector[0].ordinal() >= State.
					main_region_Main.ordinal()&& stateVector[0].ordinal() <= State.main_region_Main_activity_Present.ordinal();
		case main_region_Main_choice_Initial:
			return stateVector[0] == State.main_region_Main_choice_Initial;
		case main_region_Main_choice_Chosen:
			return stateVector[0] == State.main_region_Main_choice_Chosen;
		case main_region_Main_payment_Paid:
			return stateVector[1] == State.main_region_Main_payment_Paid;
		case main_region_Main_payment_NotPaid:
			return stateVector[1] == State.main_region_Main_payment_NotPaid;
		case main_region_Main_activity_Absent:
			return stateVector[2] == State.main_region_Main_activity_Absent;
		case main_region_Main_activity_Present:
			return stateVector[2] == State.main_region_Main_activity_Present;
		case main_region_Start:
			return stateVector[0] == State.main_region_Start;
		case main_region_Step1:
			return stateVector[0].ordinal() >= State.
					main_region_Step1.ordinal()&& stateVector[0].ordinal() <= State.main_region_Step1_r3_WaitBroyageGrains.ordinal();
		case main_region_Step1_r4_PositionnementSachet:
			return stateVector[0] == State.main_region_Step1_r4_PositionnementSachet;
		case main_region_Step1_r4_WaitPositionnementSachet:
			return stateVector[0] == State.main_region_Step1_r4_WaitPositionnementSachet;
		case main_region_Step1_r1_PositionnementDosette:
			return stateVector[1] == State.main_region_Step1_r1_PositionnementDosette;
		case main_region_Step1_r1_WaitPositionnementDosette:
			return stateVector[1] == State.main_region_Step1_r1_WaitPositionnementDosette;
		case main_region_Step1_r2_ChauffageEau:
			return stateVector[2] == State.main_region_Step1_r2_ChauffageEau;
		case main_region_Step1_r2_WaitChauffageEau:
			return stateVector[2] == State.main_region_Step1_r2_WaitChauffageEau;
		case main_region_Step1_r3_BroyageGrains:
			return stateVector[3] == State.main_region_Step1_r3_BroyageGrains;
		case main_region_Step1_r3_WaitBroyageGrains:
			return stateVector[3] == State.main_region_Step1_r3_WaitBroyageGrains;
		case main_region_Step2:
			return stateVector[0].ordinal() >= State.
					main_region_Step2.ordinal()&& stateVector[0].ordinal() <= State.main_region_Step2_r3_WaitTassageGrains.ordinal();
		case main_region_Step2_r1_PositionnementGobelet:
			return stateVector[0] == State.main_region_Step2_r1_PositionnementGobelet;
		case main_region_Step2_r1_WaitPositionnementGobelet:
			return stateVector[0] == State.main_region_Step2_r1_WaitPositionnementGobelet;
		case main_region_Step2_r2_BonneTemperature:
			return stateVector[1] == State.main_region_Step2_r2_BonneTemperature;
		case main_region_Step2_r2_WaitBonneTemperature:
			return stateVector[1] == State.main_region_Step2_r2_WaitBonneTemperature;
		case main_region_Step2_r3_TassageGrains:
			return stateVector[2] == State.main_region_Step2_r3_TassageGrains;
		case main_region_Step2_r3_WaitTassageGrains:
			return stateVector[2] == State.main_region_Step2_r3_WaitTassageGrains;
		case main_region_Step3:
			return stateVector[0].ordinal() >= State.
					main_region_Step3.ordinal()&& stateVector[0].ordinal() <= State.main_region_Step3_r2_WaitEcoulementEau.ordinal();
		case main_region_Step3_r1_Sucre:
			return stateVector[0] == State.main_region_Step3_r1_Sucre;
		case main_region_Step3_r1_WaitSucre:
			return stateVector[0] == State.main_region_Step3_r1_WaitSucre;
		case main_region_Step3_r2_EcoulementEau:
			return stateVector[1] == State.main_region_Step3_r2_EcoulementEau;
		case main_region_Step3_r2_WaitEcoulementEau:
			return stateVector[1] == State.main_region_Step3_r2_WaitEcoulementEau;
		case main_region_Else:
			return stateVector[0] == State.main_region_Else;
		case main_region_AttenteRecuperation:
			return stateVector[0] == State.main_region_AttenteRecuperation;
		case main_region_AttenteInfusion:
			return stateVector[0] == State.main_region_AttenteInfusion;
		case main_region_RetraitSachet:
			return stateVector[0] == State.main_region_RetraitSachet;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		timeEvents[eventID] = true;
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseChose() {
		sCInterface.raiseChose();
	}
	
	public synchronized void raiseMoneyGiven() {
		sCInterface.raiseMoneyGiven();
	}
	
	public synchronized void raiseAny() {
		sCInterface.raiseAny();
	}
	
	public synchronized void raiseCancel() {
		sCInterface.raiseCancel();
	}
	
	public synchronized void raiseTakeOrder() {
		sCInterface.raiseTakeOrder();
	}
	
	public synchronized void raiseReset() {
		sCInterface.raiseReset();
	}
	
	public synchronized void raiseFinish() {
		sCInterface.raiseFinish();
	}
	
	public synchronized boolean isRaisedPay() {
		return sCInterface.isRaisedPay();
	}
	
	public synchronized boolean isRaisedRefund() {
		return sCInterface.isRaisedRefund();
	}
	
	public synchronized boolean isRaisedGiveChange() {
		return sCInterface.isRaisedGiveChange();
	}
	
	public synchronized boolean isRaisedStartRecipe() {
		return sCInterface.isRaisedStartRecipe();
	}
	
	public synchronized boolean isRaisedTimesup() {
		return sCInterface.isRaisedTimesup();
	}
	
	public synchronized boolean isRaisedOrderVerified() {
		return sCInterface.isRaisedOrderVerified();
	}
	
	public synchronized boolean isRaisedRestart() {
		return sCInterface.isRaisedRestart();
	}
	
	public synchronized boolean isRaisedWaitTakeOrder() {
		return sCInterface.isRaisedWaitTakeOrder();
	}
	
	public synchronized String getChoice() {
		return sCInterface.getChoice();
	}
	
	public synchronized void setChoice(String value) {
		sCInterface.setChoice(value);
	}
	
	public synchronized long getPrice() {
		return sCInterface.getPrice();
	}
	
	public synchronized void setPrice(long value) {
		sCInterface.setPrice(value);
	}
	
	public synchronized long getMoney() {
		return sCInterface.getMoney();
	}
	
	public synchronized void setMoney(long value) {
		sCInterface.setMoney(value);
	}
	
	public synchronized long getSucre() {
		return sCInterface.getSucre();
	}
	
	public synchronized void setSucre(long value) {
		sCInterface.setSucre(value);
	}
	
	public synchronized long getTaille() {
		return sCInterface.getTaille();
	}
	
	public synchronized void setTaille(long value) {
		sCInterface.setTaille(value);
	}
	
	public synchronized long getTemperature() {
		return sCInterface.getTemperature();
	}
	
	public synchronized void setTemperature(long value) {
		sCInterface.setTemperature(value);
	}
	
	private boolean check_main_region__choice_0_tr0_tr0() {
		return sCInterface.operationCallback.isTea();
	}
	
	private boolean check_main_region__choice_0_tr2_tr2() {
		return sCInterface.operationCallback.isCoffee();
	}
	
	private boolean check_main_region__choice_1_tr0_tr0() {
		return sCInterface.operationCallback.isExpresso();
	}
	
	private boolean check_main_region__choice_2_tr1_tr1() {
		return sCInterface.operationCallback.isTea();
	}
	
	private void effect_main_region__choice_0_tr0() {
		react_main_region__sync8();
	}
	
	private void effect_main_region__choice_0_tr2() {
		react_main_region__sync1();
	}
	
	private void effect_main_region__choice_0_tr1() {
		react_main_region__choice_1();
	}
	
	private void effect_main_region__choice_1_tr0() {
		react_main_region__sync5();
	}
	
	private void effect_main_region__choice_1_tr1() {
		enterSequence_main_region_Else_default();
	}
	
	private void effect_main_region__choice_2_tr1() {
		enterSequence_main_region_AttenteInfusion_default();
	}
	
	private void effect_main_region__choice_2_tr0() {
		enterSequence_main_region_AttenteRecuperation_default();
	}
	
	/* Entry action for state 'Present'. */
	private void entryAction_main_region_Main_activity_Present() {
		timer.setTimer(this, 0, (45 * 1000), false);
	}
	
	/* Entry action for state 'Start'. */
	private void entryAction_main_region_Start() {
		timer.setTimer(this, 1, 200, false);
		
		timer.setTimer(this, 2, 100, false);
	}
	
	/* Entry action for state 'PositionnementSachet'. */
	private void entryAction_main_region_Step1_r4_PositionnementSachet() {
		timer.setTimer(this, 3, (2 * 1000), false);
	}
	
	/* Entry action for state 'PositionnementDosette'. */
	private void entryAction_main_region_Step1_r1_PositionnementDosette() {
		timer.setTimer(this, 4, (2 * 1000), false);
	}
	
	/* Entry action for state 'ChauffageEau'. */
	private void entryAction_main_region_Step1_r2_ChauffageEau() {
		timer.setTimer(this, 5, ((sCInterface.getTemperature() * 3) * 1000), false);
	}
	
	/* Entry action for state 'BroyageGrains'. */
	private void entryAction_main_region_Step1_r3_BroyageGrains() {
		timer.setTimer(this, 6, (3 * 1000), false);
	}
	
	/* Entry action for state 'PositionnementGobelet'. */
	private void entryAction_main_region_Step2_r1_PositionnementGobelet() {
		timer.setTimer(this, 7, (2 * 1000), false);
	}
	
	/* Entry action for state 'BonneTemperature'. */
	private void entryAction_main_region_Step2_r2_BonneTemperature() {
		timer.setTimer(this, 8, ((sCInterface.getTemperature() * 1) * 1000), false);
	}
	
	/* Entry action for state 'TassageGrains'. */
	private void entryAction_main_region_Step2_r3_TassageGrains() {
		timer.setTimer(this, 9, ((sCInterface.getTaille() * 1) * 1000), false);
	}
	
	/* Entry action for state 'Sucre'. */
	private void entryAction_main_region_Step3_r1_Sucre() {
		timer.setTimer(this, 10, ((sCInterface.getSucre() * 1) * 1000), false);
	}
	
	/* Entry action for state 'EcoulementEau'. */
	private void entryAction_main_region_Step3_r2_EcoulementEau() {
		timer.setTimer(this, 11, ((sCInterface.getTaille() * 1) * 1000), false);
	}
	
	/* Entry action for state 'AttenteRecuperation'. */
	private void entryAction_main_region_AttenteRecuperation() {
		timer.setTimer(this, 12, 100, false);
	}
	
	/* Entry action for state 'AttenteInfusion'. */
	private void entryAction_main_region_AttenteInfusion() {
		timer.setTimer(this, 13, (4 * 1000), false);
	}
	
	/* Entry action for state 'RetraitSachet'. */
	private void entryAction_main_region_RetraitSachet() {
		timer.setTimer(this, 14, (2 * 1000), false);
	}
	
	/* Exit action for state 'Present'. */
	private void exitAction_main_region_Main_activity_Present() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Start'. */
	private void exitAction_main_region_Start() {
		timer.unsetTimer(this, 1);
		
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'PositionnementSachet'. */
	private void exitAction_main_region_Step1_r4_PositionnementSachet() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'PositionnementDosette'. */
	private void exitAction_main_region_Step1_r1_PositionnementDosette() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'ChauffageEau'. */
	private void exitAction_main_region_Step1_r2_ChauffageEau() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'BroyageGrains'. */
	private void exitAction_main_region_Step1_r3_BroyageGrains() {
		timer.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'PositionnementGobelet'. */
	private void exitAction_main_region_Step2_r1_PositionnementGobelet() {
		timer.unsetTimer(this, 7);
	}
	
	/* Exit action for state 'BonneTemperature'. */
	private void exitAction_main_region_Step2_r2_BonneTemperature() {
		timer.unsetTimer(this, 8);
	}
	
	/* Exit action for state 'TassageGrains'. */
	private void exitAction_main_region_Step2_r3_TassageGrains() {
		timer.unsetTimer(this, 9);
	}
	
	/* Exit action for state 'Sucre'. */
	private void exitAction_main_region_Step3_r1_Sucre() {
		timer.unsetTimer(this, 10);
	}
	
	/* Exit action for state 'EcoulementEau'. */
	private void exitAction_main_region_Step3_r2_EcoulementEau() {
		timer.unsetTimer(this, 11);
	}
	
	/* Exit action for state 'AttenteRecuperation'. */
	private void exitAction_main_region_AttenteRecuperation() {
		timer.unsetTimer(this, 12);
	}
	
	/* Exit action for state 'AttenteInfusion'. */
	private void exitAction_main_region_AttenteInfusion() {
		timer.unsetTimer(this, 13);
	}
	
	/* Exit action for state 'RetraitSachet'. */
	private void exitAction_main_region_RetraitSachet() {
		timer.unsetTimer(this, 14);
	}
	
	/* 'default' enter sequence for state Main */
	private void enterSequence_main_region_Main_default() {
		enterSequence_main_region_Main_choice_default();
		enterSequence_main_region_Main_payment_default();
		enterSequence_main_region_Main_activity_default();
	}
	
	/* 'default' enter sequence for state Initial */
	private void enterSequence_main_region_Main_choice_Initial_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Main_choice_Initial;
	}
	
	/* 'default' enter sequence for state Chosen */
	private void enterSequence_main_region_Main_choice_Chosen_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Main_choice_Chosen;
	}
	
	/* 'default' enter sequence for state Paid */
	private void enterSequence_main_region_Main_payment_Paid_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Main_payment_Paid;
	}
	
	/* 'default' enter sequence for state NotPaid */
	private void enterSequence_main_region_Main_payment_NotPaid_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Main_payment_NotPaid;
	}
	
	/* 'default' enter sequence for state Absent */
	private void enterSequence_main_region_Main_activity_Absent_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Main_activity_Absent;
	}
	
	/* 'default' enter sequence for state Present */
	private void enterSequence_main_region_Main_activity_Present_default() {
		entryAction_main_region_Main_activity_Present();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Main_activity_Present;
	}
	
	/* 'default' enter sequence for state Start */
	private void enterSequence_main_region_Start_default() {
		entryAction_main_region_Start();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Start;
	}
	
	/* 'default' enter sequence for state PositionnementSachet */
	private void enterSequence_main_region_Step1_r4_PositionnementSachet_default() {
		entryAction_main_region_Step1_r4_PositionnementSachet();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Step1_r4_PositionnementSachet;
	}
	
	/* 'default' enter sequence for state WaitPositionnementSachet */
	private void enterSequence_main_region_Step1_r4_WaitPositionnementSachet_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Step1_r4_WaitPositionnementSachet;
	}
	
	/* 'default' enter sequence for state PositionnementDosette */
	private void enterSequence_main_region_Step1_r1_PositionnementDosette_default() {
		entryAction_main_region_Step1_r1_PositionnementDosette();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step1_r1_PositionnementDosette;
	}
	
	/* 'default' enter sequence for state WaitPositionnementDosette */
	private void enterSequence_main_region_Step1_r1_WaitPositionnementDosette_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step1_r1_WaitPositionnementDosette;
	}
	
	/* 'default' enter sequence for state ChauffageEau */
	private void enterSequence_main_region_Step1_r2_ChauffageEau_default() {
		entryAction_main_region_Step1_r2_ChauffageEau();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Step1_r2_ChauffageEau;
	}
	
	/* 'default' enter sequence for state WaitChauffageEau */
	private void enterSequence_main_region_Step1_r2_WaitChauffageEau_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Step1_r2_WaitChauffageEau;
	}
	
	/* 'default' enter sequence for state BroyageGrains */
	private void enterSequence_main_region_Step1_r3_BroyageGrains_default() {
		entryAction_main_region_Step1_r3_BroyageGrains();
		nextStateIndex = 3;
		stateVector[3] = State.main_region_Step1_r3_BroyageGrains;
	}
	
	/* 'default' enter sequence for state WaitBroyageGrains */
	private void enterSequence_main_region_Step1_r3_WaitBroyageGrains_default() {
		nextStateIndex = 3;
		stateVector[3] = State.main_region_Step1_r3_WaitBroyageGrains;
	}
	
	/* 'default' enter sequence for state Step2 */
	private void enterSequence_main_region_Step2_default() {
		enterSequence_main_region_Step2_r1_default();
		enterSequence_main_region_Step2_r2_default();
		enterSequence_main_region_Step2_r3_default();
	}
	
	/* 'default' enter sequence for state PositionnementGobelet */
	private void enterSequence_main_region_Step2_r1_PositionnementGobelet_default() {
		entryAction_main_region_Step2_r1_PositionnementGobelet();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Step2_r1_PositionnementGobelet;
	}
	
	/* 'default' enter sequence for state WaitPositionnementGobelet */
	private void enterSequence_main_region_Step2_r1_WaitPositionnementGobelet_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Step2_r1_WaitPositionnementGobelet;
	}
	
	/* 'default' enter sequence for state BonneTemperature */
	private void enterSequence_main_region_Step2_r2_BonneTemperature_default() {
		entryAction_main_region_Step2_r2_BonneTemperature();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step2_r2_BonneTemperature;
	}
	
	/* 'default' enter sequence for state WaitBonneTemperature */
	private void enterSequence_main_region_Step2_r2_WaitBonneTemperature_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step2_r2_WaitBonneTemperature;
	}
	
	/* 'default' enter sequence for state TassageGrains */
	private void enterSequence_main_region_Step2_r3_TassageGrains_default() {
		entryAction_main_region_Step2_r3_TassageGrains();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Step2_r3_TassageGrains;
	}
	
	/* 'default' enter sequence for state WaitTassageGrains */
	private void enterSequence_main_region_Step2_r3_WaitTassageGrains_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Step2_r3_WaitTassageGrains;
	}
	
	/* 'default' enter sequence for state Step3 */
	private void enterSequence_main_region_Step3_default() {
		enterSequence_main_region_Step3_r1_default();
		enterSequence_main_region_Step3_r2_default();
	}
	
	/* 'default' enter sequence for state Sucre */
	private void enterSequence_main_region_Step3_r1_Sucre_default() {
		entryAction_main_region_Step3_r1_Sucre();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Step3_r1_Sucre;
	}
	
	/* 'default' enter sequence for state WaitSucre */
	private void enterSequence_main_region_Step3_r1_WaitSucre_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Step3_r1_WaitSucre;
	}
	
	/* 'default' enter sequence for state EcoulementEau */
	private void enterSequence_main_region_Step3_r2_EcoulementEau_default() {
		entryAction_main_region_Step3_r2_EcoulementEau();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step3_r2_EcoulementEau;
	}
	
	/* 'default' enter sequence for state WaitEcoulementEau */
	private void enterSequence_main_region_Step3_r2_WaitEcoulementEau_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step3_r2_WaitEcoulementEau;
	}
	
	/* 'default' enter sequence for state Else */
	private void enterSequence_main_region_Else_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Else;
	}
	
	/* 'default' enter sequence for state AttenteRecuperation */
	private void enterSequence_main_region_AttenteRecuperation_default() {
		entryAction_main_region_AttenteRecuperation();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_AttenteRecuperation;
	}
	
	/* 'default' enter sequence for state AttenteInfusion */
	private void enterSequence_main_region_AttenteInfusion_default() {
		entryAction_main_region_AttenteInfusion();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_AttenteInfusion;
	}
	
	/* 'default' enter sequence for state RetraitSachet */
	private void enterSequence_main_region_RetraitSachet_default() {
		entryAction_main_region_RetraitSachet();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_RetraitSachet;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region choice */
	private void enterSequence_main_region_Main_choice_default() {
		react_main_region_Main_choice__entry_Default();
	}
	
	/* 'default' enter sequence for region payment */
	private void enterSequence_main_region_Main_payment_default() {
		react_main_region_Main_payment__entry_Default();
	}
	
	/* 'default' enter sequence for region activity */
	private void enterSequence_main_region_Main_activity_default() {
		react_main_region_Main_activity__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Step2_r1_default() {
		react_main_region_Step2_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Step2_r2_default() {
		react_main_region_Step2_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r3 */
	private void enterSequence_main_region_Step2_r3_default() {
		react_main_region_Step2_r3__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Step3_r1_default() {
		react_main_region_Step3_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Step3_r2_default() {
		react_main_region_Step3_r2__entry_Default();
	}
	
	/* Default exit sequence for state Main */
	private void exitSequence_main_region_Main() {
		exitSequence_main_region_Main_choice();
		exitSequence_main_region_Main_payment();
		exitSequence_main_region_Main_activity();
	}
	
	/* Default exit sequence for state Initial */
	private void exitSequence_main_region_Main_choice_Initial() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Chosen */
	private void exitSequence_main_region_Main_choice_Chosen() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Paid */
	private void exitSequence_main_region_Main_payment_Paid() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state NotPaid */
	private void exitSequence_main_region_Main_payment_NotPaid() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Absent */
	private void exitSequence_main_region_Main_activity_Absent() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state Present */
	private void exitSequence_main_region_Main_activity_Present() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_main_region_Main_activity_Present();
	}
	
	/* Default exit sequence for state Start */
	private void exitSequence_main_region_Start() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Start();
	}
	
	/* Default exit sequence for state Step1 */
	private void exitSequence_main_region_Step1() {
		exitSequence_main_region_Step1_r4();
		exitSequence_main_region_Step1_r1();
		exitSequence_main_region_Step1_r2();
		exitSequence_main_region_Step1_r3();
	}
	
	/* Default exit sequence for state PositionnementSachet */
	private void exitSequence_main_region_Step1_r4_PositionnementSachet() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Step1_r4_PositionnementSachet();
	}
	
	/* Default exit sequence for state WaitPositionnementSachet */
	private void exitSequence_main_region_Step1_r4_WaitPositionnementSachet() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state PositionnementDosette */
	private void exitSequence_main_region_Step1_r1_PositionnementDosette() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_Step1_r1_PositionnementDosette();
	}
	
	/* Default exit sequence for state WaitPositionnementDosette */
	private void exitSequence_main_region_Step1_r1_WaitPositionnementDosette() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state ChauffageEau */
	private void exitSequence_main_region_Step1_r2_ChauffageEau() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_main_region_Step1_r2_ChauffageEau();
	}
	
	/* Default exit sequence for state WaitChauffageEau */
	private void exitSequence_main_region_Step1_r2_WaitChauffageEau() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state BroyageGrains */
	private void exitSequence_main_region_Step1_r3_BroyageGrains() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
		
		exitAction_main_region_Step1_r3_BroyageGrains();
	}
	
	/* Default exit sequence for state WaitBroyageGrains */
	private void exitSequence_main_region_Step1_r3_WaitBroyageGrains() {
		nextStateIndex = 3;
		stateVector[3] = State.$NullState$;
	}
	
	/* Default exit sequence for state Step2 */
	private void exitSequence_main_region_Step2() {
		exitSequence_main_region_Step2_r1();
		exitSequence_main_region_Step2_r2();
		exitSequence_main_region_Step2_r3();
	}
	
	/* Default exit sequence for state PositionnementGobelet */
	private void exitSequence_main_region_Step2_r1_PositionnementGobelet() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Step2_r1_PositionnementGobelet();
	}
	
	/* Default exit sequence for state WaitPositionnementGobelet */
	private void exitSequence_main_region_Step2_r1_WaitPositionnementGobelet() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state BonneTemperature */
	private void exitSequence_main_region_Step2_r2_BonneTemperature() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_Step2_r2_BonneTemperature();
	}
	
	/* Default exit sequence for state WaitBonneTemperature */
	private void exitSequence_main_region_Step2_r2_WaitBonneTemperature() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state TassageGrains */
	private void exitSequence_main_region_Step2_r3_TassageGrains() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_main_region_Step2_r3_TassageGrains();
	}
	
	/* Default exit sequence for state WaitTassageGrains */
	private void exitSequence_main_region_Step2_r3_WaitTassageGrains() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state Step3 */
	private void exitSequence_main_region_Step3() {
		exitSequence_main_region_Step3_r1();
		exitSequence_main_region_Step3_r2();
	}
	
	/* Default exit sequence for state Sucre */
	private void exitSequence_main_region_Step3_r1_Sucre() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Step3_r1_Sucre();
	}
	
	/* Default exit sequence for state WaitSucre */
	private void exitSequence_main_region_Step3_r1_WaitSucre() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state EcoulementEau */
	private void exitSequence_main_region_Step3_r2_EcoulementEau() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_Step3_r2_EcoulementEau();
	}
	
	/* Default exit sequence for state WaitEcoulementEau */
	private void exitSequence_main_region_Step3_r2_WaitEcoulementEau() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Else */
	private void exitSequence_main_region_Else() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state AttenteRecuperation */
	private void exitSequence_main_region_AttenteRecuperation() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_AttenteRecuperation();
	}
	
	/* Default exit sequence for state AttenteInfusion */
	private void exitSequence_main_region_AttenteInfusion() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_AttenteInfusion();
	}
	
	/* Default exit sequence for state RetraitSachet */
	private void exitSequence_main_region_RetraitSachet() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_RetraitSachet();
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Main_choice_Initial:
			exitSequence_main_region_Main_choice_Initial();
			break;
		case main_region_Main_choice_Chosen:
			exitSequence_main_region_Main_choice_Chosen();
			break;
		case main_region_Start:
			exitSequence_main_region_Start();
			break;
		case main_region_Step1_r4_PositionnementSachet:
			exitSequence_main_region_Step1_r4_PositionnementSachet();
			break;
		case main_region_Step1_r4_WaitPositionnementSachet:
			exitSequence_main_region_Step1_r4_WaitPositionnementSachet();
			break;
		case main_region_Step2_r1_PositionnementGobelet:
			exitSequence_main_region_Step2_r1_PositionnementGobelet();
			break;
		case main_region_Step2_r1_WaitPositionnementGobelet:
			exitSequence_main_region_Step2_r1_WaitPositionnementGobelet();
			break;
		case main_region_Step3_r1_Sucre:
			exitSequence_main_region_Step3_r1_Sucre();
			break;
		case main_region_Step3_r1_WaitSucre:
			exitSequence_main_region_Step3_r1_WaitSucre();
			break;
		case main_region_Else:
			exitSequence_main_region_Else();
			break;
		case main_region_AttenteRecuperation:
			exitSequence_main_region_AttenteRecuperation();
			break;
		case main_region_AttenteInfusion:
			exitSequence_main_region_AttenteInfusion();
			break;
		case main_region_RetraitSachet:
			exitSequence_main_region_RetraitSachet();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_Main_payment_Paid:
			exitSequence_main_region_Main_payment_Paid();
			break;
		case main_region_Main_payment_NotPaid:
			exitSequence_main_region_Main_payment_NotPaid();
			break;
		case main_region_Step1_r1_PositionnementDosette:
			exitSequence_main_region_Step1_r1_PositionnementDosette();
			break;
		case main_region_Step1_r1_WaitPositionnementDosette:
			exitSequence_main_region_Step1_r1_WaitPositionnementDosette();
			break;
		case main_region_Step2_r2_BonneTemperature:
			exitSequence_main_region_Step2_r2_BonneTemperature();
			break;
		case main_region_Step2_r2_WaitBonneTemperature:
			exitSequence_main_region_Step2_r2_WaitBonneTemperature();
			break;
		case main_region_Step3_r2_EcoulementEau:
			exitSequence_main_region_Step3_r2_EcoulementEau();
			break;
		case main_region_Step3_r2_WaitEcoulementEau:
			exitSequence_main_region_Step3_r2_WaitEcoulementEau();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_Main_activity_Absent:
			exitSequence_main_region_Main_activity_Absent();
			break;
		case main_region_Main_activity_Present:
			exitSequence_main_region_Main_activity_Present();
			break;
		case main_region_Step1_r2_ChauffageEau:
			exitSequence_main_region_Step1_r2_ChauffageEau();
			break;
		case main_region_Step1_r2_WaitChauffageEau:
			exitSequence_main_region_Step1_r2_WaitChauffageEau();
			break;
		case main_region_Step2_r3_TassageGrains:
			exitSequence_main_region_Step2_r3_TassageGrains();
			break;
		case main_region_Step2_r3_WaitTassageGrains:
			exitSequence_main_region_Step2_r3_WaitTassageGrains();
			break;
		default:
			break;
		}
		
		switch (stateVector[3]) {
		case main_region_Step1_r3_BroyageGrains:
			exitSequence_main_region_Step1_r3_BroyageGrains();
			break;
		case main_region_Step1_r3_WaitBroyageGrains:
			exitSequence_main_region_Step1_r3_WaitBroyageGrains();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region choice */
	private void exitSequence_main_region_Main_choice() {
		switch (stateVector[0]) {
		case main_region_Main_choice_Initial:
			exitSequence_main_region_Main_choice_Initial();
			break;
		case main_region_Main_choice_Chosen:
			exitSequence_main_region_Main_choice_Chosen();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region payment */
	private void exitSequence_main_region_Main_payment() {
		switch (stateVector[1]) {
		case main_region_Main_payment_Paid:
			exitSequence_main_region_Main_payment_Paid();
			break;
		case main_region_Main_payment_NotPaid:
			exitSequence_main_region_Main_payment_NotPaid();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region activity */
	private void exitSequence_main_region_Main_activity() {
		switch (stateVector[2]) {
		case main_region_Main_activity_Absent:
			exitSequence_main_region_Main_activity_Absent();
			break;
		case main_region_Main_activity_Present:
			exitSequence_main_region_Main_activity_Present();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r4 */
	private void exitSequence_main_region_Step1_r4() {
		switch (stateVector[0]) {
		case main_region_Step1_r4_PositionnementSachet:
			exitSequence_main_region_Step1_r4_PositionnementSachet();
			break;
		case main_region_Step1_r4_WaitPositionnementSachet:
			exitSequence_main_region_Step1_r4_WaitPositionnementSachet();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Step1_r1() {
		switch (stateVector[1]) {
		case main_region_Step1_r1_PositionnementDosette:
			exitSequence_main_region_Step1_r1_PositionnementDosette();
			break;
		case main_region_Step1_r1_WaitPositionnementDosette:
			exitSequence_main_region_Step1_r1_WaitPositionnementDosette();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Step1_r2() {
		switch (stateVector[2]) {
		case main_region_Step1_r2_ChauffageEau:
			exitSequence_main_region_Step1_r2_ChauffageEau();
			break;
		case main_region_Step1_r2_WaitChauffageEau:
			exitSequence_main_region_Step1_r2_WaitChauffageEau();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r3 */
	private void exitSequence_main_region_Step1_r3() {
		switch (stateVector[3]) {
		case main_region_Step1_r3_BroyageGrains:
			exitSequence_main_region_Step1_r3_BroyageGrains();
			break;
		case main_region_Step1_r3_WaitBroyageGrains:
			exitSequence_main_region_Step1_r3_WaitBroyageGrains();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Step2_r1() {
		switch (stateVector[0]) {
		case main_region_Step2_r1_PositionnementGobelet:
			exitSequence_main_region_Step2_r1_PositionnementGobelet();
			break;
		case main_region_Step2_r1_WaitPositionnementGobelet:
			exitSequence_main_region_Step2_r1_WaitPositionnementGobelet();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Step2_r2() {
		switch (stateVector[1]) {
		case main_region_Step2_r2_BonneTemperature:
			exitSequence_main_region_Step2_r2_BonneTemperature();
			break;
		case main_region_Step2_r2_WaitBonneTemperature:
			exitSequence_main_region_Step2_r2_WaitBonneTemperature();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r3 */
	private void exitSequence_main_region_Step2_r3() {
		switch (stateVector[2]) {
		case main_region_Step2_r3_TassageGrains:
			exitSequence_main_region_Step2_r3_TassageGrains();
			break;
		case main_region_Step2_r3_WaitTassageGrains:
			exitSequence_main_region_Step2_r3_WaitTassageGrains();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Step3_r1() {
		switch (stateVector[0]) {
		case main_region_Step3_r1_Sucre:
			exitSequence_main_region_Step3_r1_Sucre();
			break;
		case main_region_Step3_r1_WaitSucre:
			exitSequence_main_region_Step3_r1_WaitSucre();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Step3_r2() {
		switch (stateVector[1]) {
		case main_region_Step3_r2_EcoulementEau:
			exitSequence_main_region_Step3_r2_EcoulementEau();
			break;
		case main_region_Step3_r2_WaitEcoulementEau:
			exitSequence_main_region_Step3_r2_WaitEcoulementEau();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_0() {
		if (check_main_region__choice_0_tr0_tr0()) {
			effect_main_region__choice_0_tr0();
		} else {
			if (check_main_region__choice_0_tr2_tr2()) {
				effect_main_region__choice_0_tr2();
			} else {
				effect_main_region__choice_0_tr1();
			}
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_1() {
		if (check_main_region__choice_1_tr0_tr0()) {
			effect_main_region__choice_1_tr0();
		} else {
			effect_main_region__choice_1_tr1();
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_2() {
		if (check_main_region__choice_2_tr1_tr1()) {
			effect_main_region__choice_2_tr1();
		} else {
			effect_main_region__choice_2_tr0();
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Main_choice__entry_Default() {
		enterSequence_main_region_Main_choice_Initial_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Main_payment__entry_Default() {
		enterSequence_main_region_Main_payment_NotPaid_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Main_activity__entry_Default() {
		enterSequence_main_region_Main_activity_Absent_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Main_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step2_r1__entry_Default() {
		enterSequence_main_region_Step2_r1_PositionnementGobelet_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step2_r2__entry_Default() {
		enterSequence_main_region_Step2_r2_BonneTemperature_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step2_r3__entry_Default() {
		enterSequence_main_region_Step2_r3_TassageGrains_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step3_r1__entry_Default() {
		enterSequence_main_region_Step3_r1_Sucre_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step3_r2__entry_Default() {
		enterSequence_main_region_Step3_r2_EcoulementEau_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync0() {
		sCInterface.raiseOrderVerified();
		
		enterSequence_main_region_Start_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync1() {
		enterSequence_main_region_Step1_r1_PositionnementDosette_default();
		enterSequence_main_region_Step1_r2_ChauffageEau_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync2() {
		enterSequence_main_region_Step2_r1_PositionnementGobelet_default();
		enterSequence_main_region_Step2_r2_BonneTemperature_default();
		enterSequence_main_region_Step2_r3_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync3() {
		enterSequence_main_region_Step3_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync4() {
		react_main_region__choice_2();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync5() {
		enterSequence_main_region_Step1_r2_ChauffageEau_default();
		enterSequence_main_region_Step1_r3_BroyageGrains_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync6() {
		enterSequence_main_region_Step2_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync7() {
		enterSequence_main_region_Step3_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync8() {
		enterSequence_main_region_Step1_r4_PositionnementSachet_default();
		enterSequence_main_region_Step1_r2_ChauffageEau_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync9() {
		enterSequence_main_region_Step2_r1_PositionnementGobelet_default();
		enterSequence_main_region_Step2_r2_BonneTemperature_default();
		enterSequence_main_region_Step2_r3_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Main_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cancel) {
				exitSequence_main_region_Main();
				sCInterface.raiseRefund();
				
				enterSequence_main_region_Main_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Main_choice_Initial_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chose) {
				exitSequence_main_region_Main_choice_Initial();
				enterSequence_main_region_Main_choice_Chosen_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Main_choice_Chosen_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((true && isStateActive(State.main_region_Main_payment_Paid)) && sCInterface.getMoney()>=sCInterface.getPrice())) {
				exitSequence_main_region_Main();
				react_main_region__sync0();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Main_payment_Paid_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.reset) {
				exitSequence_main_region_Main_payment_Paid();
				sCInterface.raiseGiveChange();
				
				enterSequence_main_region_Main_payment_NotPaid_default();
			} else {
				if (((sCInterface.getMoney()>=sCInterface.getPrice() && isStateActive(State.main_region_Main_choice_Chosen)) && true)) {
					exitSequence_main_region_Main();
					react_main_region__sync0();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Main_payment_NotPaid_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.moneyGiven) {
				exitSequence_main_region_Main_payment_NotPaid();
				sCInterface.raisePay();
				
				enterSequence_main_region_Main_payment_Paid_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Main_activity_Absent_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.any) {
				exitSequence_main_region_Main_activity_Absent();
				enterSequence_main_region_Main_activity_Present_default();
				main_region_Main_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Main_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Main_activity_Present_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.any) {
				exitSequence_main_region_Main_activity_Present();
				enterSequence_main_region_Main_activity_Present_default();
				main_region_Main_react(false);
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_Main();
					sCInterface.raiseTimesup();
					
					enterSequence_main_region_Main_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Main_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Start_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[1]) {
				exitSequence_main_region_Start();
				react_main_region__choice_0();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (timeEvents[2]) {
				sCInterface.raiseStartRecipe();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Step1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Step1_r4_PositionnementSachet_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[3]) {
				exitSequence_main_region_Step1_r4_PositionnementSachet();
				enterSequence_main_region_Step1_r4_WaitPositionnementSachet_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step1_r4_WaitPositionnementSachet_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((true && isStateActive(State.main_region_Step1_r2_WaitChauffageEau)) && sCInterface.operationCallback.isTea())) {
				exitSequence_main_region_Step1();
				react_main_region__sync9();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step1_r1_PositionnementDosette_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[4]) {
				exitSequence_main_region_Step1_r1_PositionnementDosette();
				enterSequence_main_region_Step1_r1_WaitPositionnementDosette_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step1_r1_WaitPositionnementDosette_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((true && isStateActive(State.main_region_Step1_r2_WaitChauffageEau)) && sCInterface.operationCallback.isCoffee())) {
				exitSequence_main_region_Step1();
				react_main_region__sync2();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step1_r2_ChauffageEau_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[5]) {
				exitSequence_main_region_Step1_r2_ChauffageEau();
				enterSequence_main_region_Step1_r2_WaitChauffageEau_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step1_r2_WaitChauffageEau_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((sCInterface.operationCallback.isCoffee() && isStateActive(State.main_region_Step1_r1_WaitPositionnementDosette)) && true)) {
				exitSequence_main_region_Step1();
				react_main_region__sync2();
			} else {
				if (((sCInterface.operationCallback.isExpresso() && isStateActive(State.main_region_Step1_r3_WaitBroyageGrains)) && true)) {
					exitSequence_main_region_Step1();
					react_main_region__sync6();
				} else {
					if (((sCInterface.operationCallback.isTea() && isStateActive(State.main_region_Step1_r4_WaitPositionnementSachet)) && true)) {
						exitSequence_main_region_Step1();
						react_main_region__sync9();
					} else {
						did_transition = false;
					}
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step1_r3_BroyageGrains_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[6]) {
				exitSequence_main_region_Step1_r3_BroyageGrains();
				enterSequence_main_region_Step1_r3_WaitBroyageGrains_default();
				main_region_Step1_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Step1_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step1_r3_WaitBroyageGrains_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((true && isStateActive(State.main_region_Step1_r2_WaitChauffageEau)) && sCInterface.operationCallback.isExpresso())) {
				exitSequence_main_region_Step1();
				react_main_region__sync6();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Step1_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r1_PositionnementGobelet_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[7]) {
				exitSequence_main_region_Step2_r1_PositionnementGobelet();
				enterSequence_main_region_Step2_r1_WaitPositionnementGobelet_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r1_WaitPositionnementGobelet_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((((sCInterface.operationCallback.isCoffee() || sCInterface.operationCallback.isTea()) && isStateActive(State.main_region_Step2_r2_WaitBonneTemperature)) && (sCInterface.operationCallback.isCoffee() || sCInterface.operationCallback.isTea()))) {
				exitSequence_main_region_Step2();
				react_main_region__sync3();
			} else {
				if (((((sCInterface.operationCallback.isExpresso() && isStateActive(State.main_region_Step2_r2_WaitBonneTemperature)) && sCInterface.operationCallback.isExpresso()) && isStateActive(State.main_region_Step2_r3_WaitTassageGrains)) && sCInterface.operationCallback.isExpresso())) {
					exitSequence_main_region_Step2();
					react_main_region__sync7();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r2_BonneTemperature_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[8]) {
				exitSequence_main_region_Step2_r2_BonneTemperature();
				enterSequence_main_region_Step2_r2_WaitBonneTemperature_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r2_WaitBonneTemperature_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if ((((sCInterface.operationCallback.isCoffee() || sCInterface.operationCallback.isTea()) && isStateActive(State.main_region_Step2_r1_WaitPositionnementGobelet)) && (sCInterface.operationCallback.isCoffee() || sCInterface.operationCallback.isTea()))) {
				exitSequence_main_region_Step2();
				react_main_region__sync3();
			} else {
				if (((((sCInterface.operationCallback.isExpresso() && isStateActive(State.main_region_Step2_r1_WaitPositionnementGobelet)) && sCInterface.operationCallback.isExpresso()) && isStateActive(State.main_region_Step2_r3_WaitTassageGrains)) && sCInterface.operationCallback.isExpresso())) {
					exitSequence_main_region_Step2();
					react_main_region__sync7();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r3_TassageGrains_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[9]) {
				exitSequence_main_region_Step2_r3_TassageGrains();
				enterSequence_main_region_Step2_r3_WaitTassageGrains_default();
				main_region_Step2_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Step2_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step2_r3_WaitTassageGrains_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((((sCInterface.operationCallback.isExpresso() && isStateActive(State.main_region_Step2_r1_WaitPositionnementGobelet)) && sCInterface.operationCallback.isExpresso()) && isStateActive(State.main_region_Step2_r2_WaitBonneTemperature)) && sCInterface.operationCallback.isExpresso())) {
				exitSequence_main_region_Step2();
				react_main_region__sync7();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Step2_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step3_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Step3_r1_Sucre_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[10]) {
				exitSequence_main_region_Step3_r1_Sucre();
				enterSequence_main_region_Step3_r1_WaitSucre_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step3_r1_WaitSucre_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((true && isStateActive(State.main_region_Step3_r2_WaitEcoulementEau)) && true)) {
				exitSequence_main_region_Step3();
				react_main_region__sync4();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step3_r2_EcoulementEau_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[11]) {
				exitSequence_main_region_Step3_r2_EcoulementEau();
				enterSequence_main_region_Step3_r2_WaitEcoulementEau_default();
				main_region_Step3_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Step3_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step3_r2_WaitEcoulementEau_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((true && isStateActive(State.main_region_Step3_r1_WaitSucre)) && true)) {
				exitSequence_main_region_Step3();
				react_main_region__sync4();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Step3_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Else_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_AttenteRecuperation_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.takeOrder) {
				exitSequence_main_region_AttenteRecuperation();
				sCInterface.raiseRestart();
				
				enterSequence_main_region_Main_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			if (timeEvents[12]) {
				sCInterface.raiseWaitTakeOrder();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_AttenteInfusion_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[13]) {
				exitSequence_main_region_AttenteInfusion();
				enterSequence_main_region_RetraitSachet_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_RetraitSachet_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[14]) {
				exitSequence_main_region_RetraitSachet();
				enterSequence_main_region_AttenteRecuperation_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
