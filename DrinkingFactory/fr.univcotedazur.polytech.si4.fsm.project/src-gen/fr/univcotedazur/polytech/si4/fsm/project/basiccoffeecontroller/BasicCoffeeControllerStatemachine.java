/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.basiccoffeecontroller;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class BasicCoffeeControllerStatemachine implements IBasicCoffeeControllerStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean chose;
		
		
		public void raiseChose() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							chose = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean moneyGiven;
		
		
		public void raiseMoneyGiven() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							moneyGiven = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean any;
		
		
		public void raiseAny() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							any = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean cancel;
		
		
		public void raiseCancel() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							cancel = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean reset;
		
		
		public void raiseReset() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							reset = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean finish;
		
		
		public void raiseFinish() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							finish = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean pay;
		
		
		public boolean isRaisedPay() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return pay;
			}
		}
		
		protected void raisePay() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				pay = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPayRaised();
				}
			}
		}
		
		private boolean refund;
		
		
		public boolean isRaisedRefund() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return refund;
			}
		}
		
		protected void raiseRefund() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				refund = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onRefundRaised();
				}
			}
		}
		
		private boolean giveChange;
		
		
		public boolean isRaisedGiveChange() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return giveChange;
			}
		}
		
		protected void raiseGiveChange() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				giveChange = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGiveChangeRaised();
				}
			}
		}
		
		private boolean startRecipe;
		
		
		public boolean isRaisedStartRecipe() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return startRecipe;
			}
		}
		
		protected void raiseStartRecipe() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				startRecipe = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onStartRecipeRaised();
				}
			}
		}
		
		private boolean timesup;
		
		
		public boolean isRaisedTimesup() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return timesup;
			}
		}
		
		protected void raiseTimesup() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				timesup = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onTimesupRaised();
				}
			}
		}
		
		private boolean orderVerified;
		
		
		public boolean isRaisedOrderVerified() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return orderVerified;
			}
		}
		
		protected void raiseOrderVerified() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				orderVerified = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onOrderVerifiedRaised();
				}
			}
		}
		
		private String choice;
		
		public synchronized String getChoice() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return choice;
			}
		}
		
		public void setChoice(String value) {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				this.choice = value;
			}
		}
		
		private long price;
		
		public synchronized long getPrice() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return price;
			}
		}
		
		public void setPrice(long value) {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				this.price = value;
			}
		}
		
		private long money;
		
		public synchronized long getMoney() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return money;
			}
		}
		
		public void setMoney(long value) {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				this.money = value;
			}
		}
		
		private long sucre;
		
		public synchronized long getSucre() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return sucre;
			}
		}
		
		public void setSucre(long value) {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				this.sucre = value;
			}
		}
		
		private long taille;
		
		public synchronized long getTaille() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return taille;
			}
		}
		
		public void setTaille(long value) {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				this.taille = value;
			}
		}
		
		private long temperature;
		
		public synchronized long getTemperature() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return temperature;
			}
		}
		
		public void setTemperature(long value) {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				this.temperature = value;
			}
		}
		
		protected void clearEvents() {
			chose = false;
			moneyGiven = false;
			any = false;
			cancel = false;
			reset = false;
			finish = false;
		}
		protected void clearOutEvents() {
		
		pay = false;
		refund = false;
		giveChange = false;
		startRecipe = false;
		timesup = false;
		orderVerified = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_Main,
		main_region_Main_choice_Initial,
		main_region_Main_choice_Chosen,
		main_region_Main_payment_Paid,
		main_region_Main_payment_NotPaid,
		main_region_Main_activity_Absent,
		main_region_Main_activity_Present,
		main_region_Start,
		main_region_Tea,
		main_region_Expresso,
		main_region_Step_1,
		main_region_Step_1_r1_Dosette,
		main_region_Step_1_r2_Chauffage_de_l_eau,
		main_region_Step_2,
		main_region_Step_2_r1_Gobelet,
		main_region_Step_2_r2_Bonne_temp_rature,
		main_region_Step_3,
		main_region_Step_3_r1_Sucre,
		main_region_Step_3_r2_Ecoulement_eau,
		main_region_Ready,
		$NullState$
	};
	
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[8];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public BasicCoffeeControllerStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
		sCInterface.setChoice("");
		
		sCInterface.setPrice(0);
		
		sCInterface.setMoney(0);
		
		sCInterface.setSucre(0);
		
		sCInterface.setTaille(0);
		
		sCInterface.setTemperature(0);
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_Main_choice_Initial:
				main_region_Main_choice_Initial_react(true);
				break;
			case main_region_Main_choice_Chosen:
				main_region_Main_choice_Chosen_react(true);
				break;
			case main_region_Main_payment_Paid:
				main_region_Main_payment_Paid_react(true);
				break;
			case main_region_Main_payment_NotPaid:
				main_region_Main_payment_NotPaid_react(true);
				break;
			case main_region_Main_activity_Absent:
				main_region_Main_activity_Absent_react(true);
				break;
			case main_region_Main_activity_Present:
				main_region_Main_activity_Present_react(true);
				break;
			case main_region_Start:
				main_region_Start_react(true);
				break;
			case main_region_Tea:
				main_region_Tea_react(true);
				break;
			case main_region_Expresso:
				main_region_Expresso_react(true);
				break;
			case main_region_Step_1_r1_Dosette:
				main_region_Step_1_r1_Dosette_react(true);
				break;
			case main_region_Step_1_r2_Chauffage_de_l_eau:
				main_region_Step_1_r2_Chauffage_de_l_eau_react(true);
				break;
			case main_region_Step_2_r1_Gobelet:
				main_region_Step_2_r1_Gobelet_react(true);
				break;
			case main_region_Step_2_r2_Bonne_temp_rature:
				main_region_Step_2_r2_Bonne_temp_rature_react(true);
				break;
			case main_region_Step_3_r1_Sucre:
				main_region_Step_3_r1_Sucre_react(true);
				break;
			case main_region_Step_3_r2_Ecoulement_eau:
				main_region_Step_3_r2_Ecoulement_eau_react(true);
				break;
			case main_region_Ready:
				main_region_Ready_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_Main:
			return stateVector[0].ordinal() >= State.
					main_region_Main.ordinal()&& stateVector[0].ordinal() <= State.main_region_Main_activity_Present.ordinal();
		case main_region_Main_choice_Initial:
			return stateVector[0] == State.main_region_Main_choice_Initial;
		case main_region_Main_choice_Chosen:
			return stateVector[0] == State.main_region_Main_choice_Chosen;
		case main_region_Main_payment_Paid:
			return stateVector[1] == State.main_region_Main_payment_Paid;
		case main_region_Main_payment_NotPaid:
			return stateVector[1] == State.main_region_Main_payment_NotPaid;
		case main_region_Main_activity_Absent:
			return stateVector[2] == State.main_region_Main_activity_Absent;
		case main_region_Main_activity_Present:
			return stateVector[2] == State.main_region_Main_activity_Present;
		case main_region_Start:
			return stateVector[0] == State.main_region_Start;
		case main_region_Tea:
			return stateVector[0] == State.main_region_Tea;
		case main_region_Expresso:
			return stateVector[0] == State.main_region_Expresso;
		case main_region_Step_1:
			return stateVector[0].ordinal() >= State.
					main_region_Step_1.ordinal()&& stateVector[0].ordinal() <= State.main_region_Step_1_r2_Chauffage_de_l_eau.ordinal();
		case main_region_Step_1_r1_Dosette:
			return stateVector[0] == State.main_region_Step_1_r1_Dosette;
		case main_region_Step_1_r2_Chauffage_de_l_eau:
			return stateVector[1] == State.main_region_Step_1_r2_Chauffage_de_l_eau;
		case main_region_Step_2:
			return stateVector[0].ordinal() >= State.
					main_region_Step_2.ordinal()&& stateVector[0].ordinal() <= State.main_region_Step_2_r2_Bonne_temp_rature.ordinal();
		case main_region_Step_2_r1_Gobelet:
			return stateVector[0] == State.main_region_Step_2_r1_Gobelet;
		case main_region_Step_2_r2_Bonne_temp_rature:
			return stateVector[1] == State.main_region_Step_2_r2_Bonne_temp_rature;
		case main_region_Step_3:
			return stateVector[0].ordinal() >= State.
					main_region_Step_3.ordinal()&& stateVector[0].ordinal() <= State.main_region_Step_3_r2_Ecoulement_eau.ordinal();
		case main_region_Step_3_r1_Sucre:
			return stateVector[0] == State.main_region_Step_3_r1_Sucre;
		case main_region_Step_3_r2_Ecoulement_eau:
			return stateVector[1] == State.main_region_Step_3_r2_Ecoulement_eau;
		case main_region_Ready:
			return stateVector[0] == State.main_region_Ready;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseChose() {
		sCInterface.raiseChose();
	}
	
	public synchronized void raiseMoneyGiven() {
		sCInterface.raiseMoneyGiven();
	}
	
	public synchronized void raiseAny() {
		sCInterface.raiseAny();
	}
	
	public synchronized void raiseCancel() {
		sCInterface.raiseCancel();
	}
	
	public synchronized void raiseReset() {
		sCInterface.raiseReset();
	}
	
	public synchronized void raiseFinish() {
		sCInterface.raiseFinish();
	}
	
	public synchronized boolean isRaisedPay() {
		return sCInterface.isRaisedPay();
	}
	
	public synchronized boolean isRaisedRefund() {
		return sCInterface.isRaisedRefund();
	}
	
	public synchronized boolean isRaisedGiveChange() {
		return sCInterface.isRaisedGiveChange();
	}
	
	public synchronized boolean isRaisedStartRecipe() {
		return sCInterface.isRaisedStartRecipe();
	}
	
	public synchronized boolean isRaisedTimesup() {
		return sCInterface.isRaisedTimesup();
	}
	
	public synchronized boolean isRaisedOrderVerified() {
		return sCInterface.isRaisedOrderVerified();
	}
	
	public synchronized String getChoice() {
		return sCInterface.getChoice();
	}
	
	public synchronized void setChoice(String value) {
		sCInterface.setChoice(value);
	}
	
	public synchronized long getPrice() {
		return sCInterface.getPrice();
	}
	
	public synchronized void setPrice(long value) {
		sCInterface.setPrice(value);
	}
	
	public synchronized long getMoney() {
		return sCInterface.getMoney();
	}
	
	public synchronized void setMoney(long value) {
		sCInterface.setMoney(value);
	}
	
	public synchronized long getSucre() {
		return sCInterface.getSucre();
	}
	
	public synchronized void setSucre(long value) {
		sCInterface.setSucre(value);
	}
	
	public synchronized long getTaille() {
		return sCInterface.getTaille();
	}
	
	public synchronized void setTaille(long value) {
		sCInterface.setTaille(value);
	}
	
	public synchronized long getTemperature() {
		return sCInterface.getTemperature();
	}
	
	public synchronized void setTemperature(long value) {
		sCInterface.setTemperature(value);
	}
	
	private boolean check_main_region__choice_0_tr0_tr0() {
		return (sCInterface.getChoice()== null?"tea" ==null :sCInterface.getChoice().equals("tea"));
	}
	
	private boolean check_main_region__choice_0_tr1_tr1() {
		return (sCInterface.getChoice()== null?"expresso" ==null :sCInterface.getChoice().equals("expresso"));
	}
	
	private boolean check_main_region__choice_0_tr2_tr2() {
		return (sCInterface.getChoice()== null?"coffee" ==null :sCInterface.getChoice().equals("coffee"));
	}
	
	private void effect_main_region__choice_0_tr0() {
		enterSequence_main_region_Tea_default();
	}
	
	private void effect_main_region__choice_0_tr1() {
		enterSequence_main_region_Expresso_default();
	}
	
	private void effect_main_region__choice_0_tr2() {
		react_main_region__sync1();
	}
	
	/* Entry action for state 'Present'. */
	private void entryAction_main_region_Main_activity_Present() {
		timer.setTimer(this, 0, (45 * 1000), false);
	}
	
	/* Entry action for state 'Start'. */
	private void entryAction_main_region_Start() {
		timer.setTimer(this, 1, 10, false);
	}
	
	/* Entry action for state 'Dosette'. */
	private void entryAction_main_region_Step_1_r1_Dosette() {
		timer.setTimer(this, 2, (2 * 1000), false);
	}
	
	/* Entry action for state 'Chauffage de l'eau'. */
	private void entryAction_main_region_Step_1_r2_Chauffage_de_l_eau() {
		timer.setTimer(this, 3, ((sCInterface.getTemperature() * 3) * 1000), false);
	}
	
	/* Entry action for state 'Gobelet'. */
	private void entryAction_main_region_Step_2_r1_Gobelet() {
		timer.setTimer(this, 4, (2 * 1000), false);
	}
	
	/* Entry action for state 'Bonne température'. */
	private void entryAction_main_region_Step_2_r2_Bonne_temp_rature() {
		timer.setTimer(this, 5, ((sCInterface.getTemperature() * 1) * 1000), false);
	}
	
	/* Entry action for state 'Sucre'. */
	private void entryAction_main_region_Step_3_r1_Sucre() {
		timer.setTimer(this, 6, ((sCInterface.getSucre() * 1) * 1000), false);
	}
	
	/* Entry action for state 'Ecoulement eau'. */
	private void entryAction_main_region_Step_3_r2_Ecoulement_eau() {
		timer.setTimer(this, 7, ((sCInterface.getTaille() * 1) * 1000), false);
	}
	
	/* Exit action for state 'Present'. */
	private void exitAction_main_region_Main_activity_Present() {
		timer.unsetTimer(this, 0);
	}
	
	/* Exit action for state 'Start'. */
	private void exitAction_main_region_Start() {
		timer.unsetTimer(this, 1);
	}
	
	/* Exit action for state 'Dosette'. */
	private void exitAction_main_region_Step_1_r1_Dosette() {
		timer.unsetTimer(this, 2);
	}
	
	/* Exit action for state 'Chauffage de l'eau'. */
	private void exitAction_main_region_Step_1_r2_Chauffage_de_l_eau() {
		timer.unsetTimer(this, 3);
	}
	
	/* Exit action for state 'Gobelet'. */
	private void exitAction_main_region_Step_2_r1_Gobelet() {
		timer.unsetTimer(this, 4);
	}
	
	/* Exit action for state 'Bonne température'. */
	private void exitAction_main_region_Step_2_r2_Bonne_temp_rature() {
		timer.unsetTimer(this, 5);
	}
	
	/* Exit action for state 'Sucre'. */
	private void exitAction_main_region_Step_3_r1_Sucre() {
		timer.unsetTimer(this, 6);
	}
	
	/* Exit action for state 'Ecoulement eau'. */
	private void exitAction_main_region_Step_3_r2_Ecoulement_eau() {
		timer.unsetTimer(this, 7);
	}
	
	/* 'default' enter sequence for state Main */
	private void enterSequence_main_region_Main_default() {
		enterSequence_main_region_Main_choice_default();
		enterSequence_main_region_Main_payment_default();
		enterSequence_main_region_Main_activity_default();
	}
	
	/* 'default' enter sequence for state Initial */
	private void enterSequence_main_region_Main_choice_Initial_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Main_choice_Initial;
	}
	
	/* 'default' enter sequence for state Chosen */
	private void enterSequence_main_region_Main_choice_Chosen_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Main_choice_Chosen;
	}
	
	/* 'default' enter sequence for state Paid */
	private void enterSequence_main_region_Main_payment_Paid_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Main_payment_Paid;
	}
	
	/* 'default' enter sequence for state NotPaid */
	private void enterSequence_main_region_Main_payment_NotPaid_default() {
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Main_payment_NotPaid;
	}
	
	/* 'default' enter sequence for state Absent */
	private void enterSequence_main_region_Main_activity_Absent_default() {
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Main_activity_Absent;
	}
	
	/* 'default' enter sequence for state Present */
	private void enterSequence_main_region_Main_activity_Present_default() {
		entryAction_main_region_Main_activity_Present();
		nextStateIndex = 2;
		stateVector[2] = State.main_region_Main_activity_Present;
	}
	
	/* 'default' enter sequence for state Start */
	private void enterSequence_main_region_Start_default() {
		entryAction_main_region_Start();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Start;
	}
	
	/* 'default' enter sequence for state Tea */
	private void enterSequence_main_region_Tea_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Tea;
	}
	
	/* 'default' enter sequence for state Expresso */
	private void enterSequence_main_region_Expresso_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Expresso;
	}
	
	/* 'default' enter sequence for state Dosette */
	private void enterSequence_main_region_Step_1_r1_Dosette_default() {
		entryAction_main_region_Step_1_r1_Dosette();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Step_1_r1_Dosette;
	}
	
	/* 'default' enter sequence for state Chauffage de l'eau */
	private void enterSequence_main_region_Step_1_r2_Chauffage_de_l_eau_default() {
		entryAction_main_region_Step_1_r2_Chauffage_de_l_eau();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step_1_r2_Chauffage_de_l_eau;
	}
	
	/* 'default' enter sequence for state Step 2 */
	private void enterSequence_main_region_Step_2_default() {
		enterSequence_main_region_Step_2_r1_default();
		enterSequence_main_region_Step_2_r2_default();
	}
	
	/* 'default' enter sequence for state Gobelet */
	private void enterSequence_main_region_Step_2_r1_Gobelet_default() {
		entryAction_main_region_Step_2_r1_Gobelet();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Step_2_r1_Gobelet;
	}
	
	/* 'default' enter sequence for state Bonne température */
	private void enterSequence_main_region_Step_2_r2_Bonne_temp_rature_default() {
		entryAction_main_region_Step_2_r2_Bonne_temp_rature();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step_2_r2_Bonne_temp_rature;
	}
	
	/* 'default' enter sequence for state Step 3 */
	private void enterSequence_main_region_Step_3_default() {
		enterSequence_main_region_Step_3_r1_default();
		enterSequence_main_region_Step_3_r2_default();
	}
	
	/* 'default' enter sequence for state Sucre */
	private void enterSequence_main_region_Step_3_r1_Sucre_default() {
		entryAction_main_region_Step_3_r1_Sucre();
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Step_3_r1_Sucre;
	}
	
	/* 'default' enter sequence for state Ecoulement eau */
	private void enterSequence_main_region_Step_3_r2_Ecoulement_eau_default() {
		entryAction_main_region_Step_3_r2_Ecoulement_eau();
		nextStateIndex = 1;
		stateVector[1] = State.main_region_Step_3_r2_Ecoulement_eau;
	}
	
	/* 'default' enter sequence for state Ready */
	private void enterSequence_main_region_Ready_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Ready;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region choice */
	private void enterSequence_main_region_Main_choice_default() {
		react_main_region_Main_choice__entry_Default();
	}
	
	/* 'default' enter sequence for region payment */
	private void enterSequence_main_region_Main_payment_default() {
		react_main_region_Main_payment__entry_Default();
	}
	
	/* 'default' enter sequence for region activity */
	private void enterSequence_main_region_Main_activity_default() {
		react_main_region_Main_activity__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Step_2_r1_default() {
		react_main_region_Step_2_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Step_2_r2_default() {
		react_main_region_Step_2_r2__entry_Default();
	}
	
	/* 'default' enter sequence for region r1 */
	private void enterSequence_main_region_Step_3_r1_default() {
		react_main_region_Step_3_r1__entry_Default();
	}
	
	/* 'default' enter sequence for region r2 */
	private void enterSequence_main_region_Step_3_r2_default() {
		react_main_region_Step_3_r2__entry_Default();
	}
	
	/* Default exit sequence for state Main */
	private void exitSequence_main_region_Main() {
		exitSequence_main_region_Main_choice();
		exitSequence_main_region_Main_payment();
		exitSequence_main_region_Main_activity();
	}
	
	/* Default exit sequence for state Initial */
	private void exitSequence_main_region_Main_choice_Initial() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Chosen */
	private void exitSequence_main_region_Main_choice_Chosen() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Paid */
	private void exitSequence_main_region_Main_payment_Paid() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state NotPaid */
	private void exitSequence_main_region_Main_payment_NotPaid() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Absent */
	private void exitSequence_main_region_Main_activity_Absent() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for state Present */
	private void exitSequence_main_region_Main_activity_Present() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_main_region_Main_activity_Present();
	}
	
	/* Default exit sequence for state Start */
	private void exitSequence_main_region_Start() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Start();
	}
	
	/* Default exit sequence for state Tea */
	private void exitSequence_main_region_Tea() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Expresso */
	private void exitSequence_main_region_Expresso() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Step 1 */
	private void exitSequence_main_region_Step_1() {
		exitSequence_main_region_Step_1_r1();
		exitSequence_main_region_Step_1_r2();
	}
	
	/* Default exit sequence for state Dosette */
	private void exitSequence_main_region_Step_1_r1_Dosette() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Step_1_r1_Dosette();
	}
	
	/* Default exit sequence for state Chauffage de l'eau */
	private void exitSequence_main_region_Step_1_r2_Chauffage_de_l_eau() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_Step_1_r2_Chauffage_de_l_eau();
	}
	
	/* Default exit sequence for state Step 2 */
	private void exitSequence_main_region_Step_2() {
		exitSequence_main_region_Step_2_r1();
		exitSequence_main_region_Step_2_r2();
	}
	
	/* Default exit sequence for state Gobelet */
	private void exitSequence_main_region_Step_2_r1_Gobelet() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Step_2_r1_Gobelet();
	}
	
	/* Default exit sequence for state Bonne température */
	private void exitSequence_main_region_Step_2_r2_Bonne_temp_rature() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_Step_2_r2_Bonne_temp_rature();
	}
	
	/* Default exit sequence for state Step 3 */
	private void exitSequence_main_region_Step_3() {
		exitSequence_main_region_Step_3_r1();
		exitSequence_main_region_Step_3_r2();
	}
	
	/* Default exit sequence for state Sucre */
	private void exitSequence_main_region_Step_3_r1_Sucre() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
		
		exitAction_main_region_Step_3_r1_Sucre();
	}
	
	/* Default exit sequence for state Ecoulement eau */
	private void exitSequence_main_region_Step_3_r2_Ecoulement_eau() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
		
		exitAction_main_region_Step_3_r2_Ecoulement_eau();
	}
	
	/* Default exit sequence for state Ready */
	private void exitSequence_main_region_Ready() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_Main_choice_Initial:
			exitSequence_main_region_Main_choice_Initial();
			break;
		case main_region_Main_choice_Chosen:
			exitSequence_main_region_Main_choice_Chosen();
			break;
		case main_region_Start:
			exitSequence_main_region_Start();
			break;
		case main_region_Tea:
			exitSequence_main_region_Tea();
			break;
		case main_region_Expresso:
			exitSequence_main_region_Expresso();
			break;
		case main_region_Step_1_r1_Dosette:
			exitSequence_main_region_Step_1_r1_Dosette();
			break;
		case main_region_Step_2_r1_Gobelet:
			exitSequence_main_region_Step_2_r1_Gobelet();
			break;
		case main_region_Step_3_r1_Sucre:
			exitSequence_main_region_Step_3_r1_Sucre();
			break;
		case main_region_Ready:
			exitSequence_main_region_Ready();
			break;
		default:
			break;
		}
		
		switch (stateVector[1]) {
		case main_region_Main_payment_Paid:
			exitSequence_main_region_Main_payment_Paid();
			break;
		case main_region_Main_payment_NotPaid:
			exitSequence_main_region_Main_payment_NotPaid();
			break;
		case main_region_Step_1_r2_Chauffage_de_l_eau:
			exitSequence_main_region_Step_1_r2_Chauffage_de_l_eau();
			break;
		case main_region_Step_2_r2_Bonne_temp_rature:
			exitSequence_main_region_Step_2_r2_Bonne_temp_rature();
			break;
		case main_region_Step_3_r2_Ecoulement_eau:
			exitSequence_main_region_Step_3_r2_Ecoulement_eau();
			break;
		default:
			break;
		}
		
		switch (stateVector[2]) {
		case main_region_Main_activity_Absent:
			exitSequence_main_region_Main_activity_Absent();
			break;
		case main_region_Main_activity_Present:
			exitSequence_main_region_Main_activity_Present();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region choice */
	private void exitSequence_main_region_Main_choice() {
		switch (stateVector[0]) {
		case main_region_Main_choice_Initial:
			exitSequence_main_region_Main_choice_Initial();
			break;
		case main_region_Main_choice_Chosen:
			exitSequence_main_region_Main_choice_Chosen();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region payment */
	private void exitSequence_main_region_Main_payment() {
		switch (stateVector[1]) {
		case main_region_Main_payment_Paid:
			exitSequence_main_region_Main_payment_Paid();
			break;
		case main_region_Main_payment_NotPaid:
			exitSequence_main_region_Main_payment_NotPaid();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region activity */
	private void exitSequence_main_region_Main_activity() {
		switch (stateVector[2]) {
		case main_region_Main_activity_Absent:
			exitSequence_main_region_Main_activity_Absent();
			break;
		case main_region_Main_activity_Present:
			exitSequence_main_region_Main_activity_Present();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Step_1_r1() {
		switch (stateVector[0]) {
		case main_region_Step_1_r1_Dosette:
			exitSequence_main_region_Step_1_r1_Dosette();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Step_1_r2() {
		switch (stateVector[1]) {
		case main_region_Step_1_r2_Chauffage_de_l_eau:
			exitSequence_main_region_Step_1_r2_Chauffage_de_l_eau();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Step_2_r1() {
		switch (stateVector[0]) {
		case main_region_Step_2_r1_Gobelet:
			exitSequence_main_region_Step_2_r1_Gobelet();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Step_2_r2() {
		switch (stateVector[1]) {
		case main_region_Step_2_r2_Bonne_temp_rature:
			exitSequence_main_region_Step_2_r2_Bonne_temp_rature();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_Step_3_r1() {
		switch (stateVector[0]) {
		case main_region_Step_3_r1_Sucre:
			exitSequence_main_region_Step_3_r1_Sucre();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r2 */
	private void exitSequence_main_region_Step_3_r2() {
		switch (stateVector[1]) {
		case main_region_Step_3_r2_Ecoulement_eau:
			exitSequence_main_region_Step_3_r2_Ecoulement_eau();
			break;
		default:
			break;
		}
	}
	
	/* The reactions of state null. */
	private void react_main_region__choice_0() {
		if (check_main_region__choice_0_tr0_tr0()) {
			effect_main_region__choice_0_tr0();
		} else {
			if (check_main_region__choice_0_tr1_tr1()) {
				effect_main_region__choice_0_tr1();
			} else {
				if (check_main_region__choice_0_tr2_tr2()) {
					effect_main_region__choice_0_tr2();
				}
			}
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Main_choice__entry_Default() {
		enterSequence_main_region_Main_choice_Initial_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Main_payment__entry_Default() {
		enterSequence_main_region_Main_payment_NotPaid_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Main_activity__entry_Default() {
		enterSequence_main_region_Main_activity_Absent_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_Main_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step_2_r1__entry_Default() {
		enterSequence_main_region_Step_2_r1_Gobelet_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step_2_r2__entry_Default() {
		enterSequence_main_region_Step_2_r2_Bonne_temp_rature_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step_3_r1__entry_Default() {
		enterSequence_main_region_Step_3_r1_Sucre_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region_Step_3_r2__entry_Default() {
		enterSequence_main_region_Step_3_r2_Ecoulement_eau_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync0() {
		sCInterface.raiseOrderVerified();
		
		enterSequence_main_region_Start_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync1() {
		enterSequence_main_region_Step_1_r1_Dosette_default();
		enterSequence_main_region_Step_1_r2_Chauffage_de_l_eau_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync2() {
		enterSequence_main_region_Step_2_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync3() {
		enterSequence_main_region_Step_3_default();
	}
	
	/* The reactions of state null. */
	private void react_main_region__sync4() {
		enterSequence_main_region_Ready_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_Main_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.cancel) {
				exitSequence_main_region_Main();
				sCInterface.raiseRefund();
				
				enterSequence_main_region_Main_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Main_choice_Initial_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.chose) {
				exitSequence_main_region_Main_choice_Initial();
				enterSequence_main_region_Main_choice_Chosen_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Main_choice_Chosen_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((true && isStateActive(State.main_region_Main_payment_Paid)) && sCInterface.getMoney()>=sCInterface.getPrice())) {
				exitSequence_main_region_Main();
				react_main_region__sync0();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Main_payment_Paid_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.reset) {
				exitSequence_main_region_Main_payment_Paid();
				sCInterface.raiseGiveChange();
				
				enterSequence_main_region_Main_payment_NotPaid_default();
			} else {
				if (((sCInterface.getMoney()>=sCInterface.getPrice() && isStateActive(State.main_region_Main_choice_Chosen)) && true)) {
					exitSequence_main_region_Main();
					react_main_region__sync0();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Main_payment_NotPaid_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.moneyGiven) {
				exitSequence_main_region_Main_payment_NotPaid();
				sCInterface.raisePay();
				
				enterSequence_main_region_Main_payment_Paid_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Main_activity_Absent_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.any) {
				exitSequence_main_region_Main_activity_Absent();
				enterSequence_main_region_Main_activity_Present_default();
				main_region_Main_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Main_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Main_activity_Present_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.any) {
				exitSequence_main_region_Main_activity_Present();
				enterSequence_main_region_Main_activity_Present_default();
				main_region_Main_react(false);
			} else {
				if (timeEvents[0]) {
					exitSequence_main_region_Main();
					sCInterface.raiseTimesup();
					
					enterSequence_main_region_Main_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Main_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Start_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			exitSequence_main_region_Start();
			react_main_region__choice_0();
		}
		if (did_transition==false) {
			if (timeEvents[1]) {
				sCInterface.raiseStartRecipe();
			}
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Tea_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Expresso_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Step_1_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Step_1_r1_Dosette_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[2] && isStateActive(State.main_region_Step_1_r2_Chauffage_de_l_eau)) && timeEvents[3])) {
				exitSequence_main_region_Step_1();
				react_main_region__sync2();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step_1_r2_Chauffage_de_l_eau_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[3] && isStateActive(State.main_region_Step_1_r1_Dosette)) && timeEvents[2])) {
				exitSequence_main_region_Step_1();
				react_main_region__sync2();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Step_1_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step_2_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Step_2_r1_Gobelet_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[4] && isStateActive(State.main_region_Step_2_r2_Bonne_temp_rature)) && timeEvents[5])) {
				exitSequence_main_region_Step_2();
				react_main_region__sync3();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step_2_r2_Bonne_temp_rature_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[5] && isStateActive(State.main_region_Step_2_r1_Gobelet)) && timeEvents[4])) {
				exitSequence_main_region_Step_2();
				react_main_region__sync3();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Step_2_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Step_3_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean main_region_Step_3_r1_Sucre_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[6] && isStateActive(State.main_region_Step_3_r2_Ecoulement_eau)) && timeEvents[7])) {
				exitSequence_main_region_Step_3();
				react_main_region__sync4();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Step_3_r2_Ecoulement_eau_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (((timeEvents[7] && isStateActive(State.main_region_Step_3_r1_Sucre)) && timeEvents[6])) {
				exitSequence_main_region_Step_3();
				react_main_region__sync4();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_Step_3_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Ready_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			did_transition = false;
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
