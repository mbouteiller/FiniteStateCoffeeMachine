/** Generated by YAKINDU Statechart Tools code generator. */
package fr.univcotedazur.polytech.si4.fsm.project.basiccoffeecontroller;

import fr.univcotedazur.polytech.si4.fsm.project.ITimer;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

public class BasicCoffeeControllerStatemachine implements IBasicCoffeeControllerStatemachine {
	protected class SCInterfaceImpl implements SCInterface {
	
		private List<SCInterfaceListener> listeners = new LinkedList<SCInterfaceListener>();
		
		public List<SCInterfaceListener> getListeners() {
			return listeners;
		}
		private boolean choice;
		
		
		public void raiseChoice() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							choice = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean amountVerified;
		
		
		public void raiseAmountVerified() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							amountVerified = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean canceled;
		
		
		public void raiseCanceled() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							canceled = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean moneyGiven;
		
		
		public void raiseMoneyGiven() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							moneyGiven = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean any;
		
		
		public void raiseAny() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							any = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean reset;
		
		
		public void raiseReset() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							reset = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean paid;
		
		
		public void raisePaid() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							paid = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean finish;
		
		
		public void raiseFinish() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				inEventQueue.add(
					new Runnable() {
						@Override
						public void run() {
							finish = true;
							singleCycle();
						}
					}
				);
				runCycle();
			}
		}
		
		private boolean pay;
		
		
		public boolean isRaisedPay() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return pay;
			}
		}
		
		protected void raisePay() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				pay = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onPayRaised();
				}
			}
		}
		
		private boolean refund;
		
		
		public boolean isRaisedRefund() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return refund;
			}
		}
		
		protected void raiseRefund() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				refund = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onRefundRaised();
				}
			}
		}
		
		private boolean giveChange;
		
		
		public boolean isRaisedGiveChange() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return giveChange;
			}
		}
		
		protected void raiseGiveChange() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				giveChange = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onGiveChangeRaised();
				}
			}
		}
		
		private boolean checkAmount;
		
		
		public boolean isRaisedCheckAmount() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return checkAmount;
			}
		}
		
		protected void raiseCheckAmount() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				checkAmount = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCheckAmountRaised();
				}
			}
		}
		
		private boolean cancel;
		
		
		public boolean isRaisedCancel() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return cancel;
			}
		}
		
		protected void raiseCancel() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				cancel = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCancelRaised();
				}
			}
		}
		
		private boolean startRecipe;
		
		
		public boolean isRaisedStartRecipe() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return startRecipe;
			}
		}
		
		protected void raiseStartRecipe() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				startRecipe = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onStartRecipeRaised();
				}
			}
		}
		
		private boolean clean;
		
		
		public boolean isRaisedClean() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return clean;
			}
		}
		
		protected void raiseClean() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				clean = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onCleanRaised();
				}
			}
		}
		
		private boolean restart;
		
		
		public boolean isRaisedRestart() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				return restart;
			}
		}
		
		protected void raiseRestart() {
			synchronized(BasicCoffeeControllerStatemachine.this) {
				restart = true;
				for (SCInterfaceListener listener : listeners) {
					listener.onRestartRaised();
				}
			}
		}
		
		protected void clearEvents() {
			choice = false;
			amountVerified = false;
			canceled = false;
			moneyGiven = false;
			any = false;
			reset = false;
			paid = false;
			finish = false;
		}
		protected void clearOutEvents() {
		
		pay = false;
		refund = false;
		giveChange = false;
		checkAmount = false;
		cancel = false;
		startRecipe = false;
		clean = false;
		restart = false;
		}
		
	}
	
	
	protected SCInterfaceImpl sCInterface;
	
	private boolean initialized = false;
	
	public enum State {
		main_region_ChoiceState,
		main_region_ChoiceState_r1_Chosen,
		main_region_ChoiceState_r1_WaitChoice,
		main_region_ChoiceState_r1_Initial,
		main_region_ChoiceState_r1_VerifyAmount,
		main_region_Begin,
		main_region_Clean,
		payment_NotPaid,
		payment_Paid,
		activity_Present,
		activity_Absent,
		$NullState$
	};
	
	private final State[] stateVector = new State[3];
	
	private int nextStateIndex;
	
	private ITimer timer;
	
	private final boolean[] timeEvents = new boolean[1];
	
	private BlockingQueue<Runnable> inEventQueue = new LinkedBlockingQueue<Runnable>();
	private boolean isRunningCycle = false;
	public BasicCoffeeControllerStatemachine() {
		sCInterface = new SCInterfaceImpl();
	}
	
	public synchronized void init() {
		this.initialized = true;
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		for (int i = 0; i < 3; i++) {
			stateVector[i] = State.$NullState$;
		}
		clearEvents();
		clearOutEvents();
	}
	
	public synchronized void enter() {
		if (!initialized) {
			throw new IllegalStateException(
				"The state machine needs to be initialized first by calling the init() function."
			);
		}
		if (timer == null) {
			throw new IllegalStateException("timer not set.");
		}
		enterSequence_main_region_default();
		enterSequence_payment_default();
		enterSequence_activity_default();
	}
	
	public synchronized void runCycle() {
		if (!initialized)
			throw new IllegalStateException(
					"The state machine needs to be initialized first by calling the init() function.");
		
		if (isRunningCycle) {
			return;
		}
		isRunningCycle = true;
		
		clearOutEvents();
	
		Runnable task = getNextEvent();
		if (task == null) {
			task = getDefaultEvent();
		}
		
		while (task != null) {
			task.run();
			clearEvents();
			task = getNextEvent();
		}
		
		isRunningCycle = false;
	}
	
	protected synchronized void singleCycle() {
		for (nextStateIndex = 0; nextStateIndex < stateVector.length; nextStateIndex++) {
			switch (stateVector[nextStateIndex]) {
			case main_region_ChoiceState_r1_Chosen:
				main_region_ChoiceState_r1_Chosen_react(true);
				break;
			case main_region_ChoiceState_r1_WaitChoice:
				main_region_ChoiceState_r1_WaitChoice_react(true);
				break;
			case main_region_ChoiceState_r1_Initial:
				main_region_ChoiceState_r1_Initial_react(true);
				break;
			case main_region_ChoiceState_r1_VerifyAmount:
				main_region_ChoiceState_r1_VerifyAmount_react(true);
				break;
			case main_region_Begin:
				main_region_Begin_react(true);
				break;
			case main_region_Clean:
				main_region_Clean_react(true);
				break;
			case payment_NotPaid:
				payment_NotPaid_react(true);
				break;
			case payment_Paid:
				payment_Paid_react(true);
				break;
			case activity_Present:
				activity_Present_react(true);
				break;
			case activity_Absent:
				activity_Absent_react(true);
				break;
			default:
				// $NullState$
			}
		}
	}
	
	protected Runnable getNextEvent() {
		if(!inEventQueue.isEmpty()) {
			return inEventQueue.poll();
		}
		return null;
	}
	
	protected Runnable getDefaultEvent() {
		return new Runnable() {
			@Override
			public void run() {
				singleCycle();
			}
		};
	}
	
	public synchronized void exit() {
		exitSequence_main_region();
		exitSequence_payment();
		exitSequence_activity();
	}
	
	/**
	 * @see IStatemachine#isActive()
	 */
	public synchronized boolean isActive() {
		return stateVector[0] != State.$NullState$||stateVector[1] != State.$NullState$||stateVector[2] != State.$NullState$;
	}
	
	/** 
	* Always returns 'false' since this state machine can never become final.
	*
	* @see IStatemachine#isFinal()
	*/
	public synchronized boolean isFinal() {
		return false;
	}
	/**
	* This method resets the incoming events (time events included).
	*/
	protected void clearEvents() {
		sCInterface.clearEvents();
		for (int i=0; i<timeEvents.length; i++) {
			timeEvents[i] = false;
		}
	}
	
	/**
	* This method resets the outgoing events.
	*/
	protected void clearOutEvents() {
		sCInterface.clearOutEvents();
	}
	
	/**
	* Returns true if the given state is currently active otherwise false.
	*/
	public synchronized boolean isStateActive(State state) {
	
		switch (state) {
		case main_region_ChoiceState:
			return stateVector[0].ordinal() >= State.
					main_region_ChoiceState.ordinal()&& stateVector[0].ordinal() <= State.main_region_ChoiceState_r1_VerifyAmount.ordinal();
		case main_region_ChoiceState_r1_Chosen:
			return stateVector[0] == State.main_region_ChoiceState_r1_Chosen;
		case main_region_ChoiceState_r1_WaitChoice:
			return stateVector[0] == State.main_region_ChoiceState_r1_WaitChoice;
		case main_region_ChoiceState_r1_Initial:
			return stateVector[0] == State.main_region_ChoiceState_r1_Initial;
		case main_region_ChoiceState_r1_VerifyAmount:
			return stateVector[0] == State.main_region_ChoiceState_r1_VerifyAmount;
		case main_region_Begin:
			return stateVector[0] == State.main_region_Begin;
		case main_region_Clean:
			return stateVector[0] == State.main_region_Clean;
		case payment_NotPaid:
			return stateVector[1] == State.payment_NotPaid;
		case payment_Paid:
			return stateVector[1] == State.payment_Paid;
		case activity_Present:
			return stateVector[2] == State.activity_Present;
		case activity_Absent:
			return stateVector[2] == State.activity_Absent;
		default:
			return false;
		}
	}
	
	/**
	* Set the {@link ITimer} for the state machine. It must be set
	* externally on a timed state machine before a run cycle can be correctly
	* executed.
	* 
	* @param timer
	*/
	public synchronized void setTimer(ITimer timer) {
		this.timer = timer;
	}
	
	/**
	* Returns the currently used timer.
	* 
	* @return {@link ITimer}
	*/
	public ITimer getTimer() {
		return timer;
	}
	
	public synchronized void timeElapsed(int eventID) {
		inEventQueue.add(new Runnable() {
			@Override
			public void run() {
				timeEvents[eventID] = true;
				singleCycle();
			}
		});
		runCycle();
	}
	
	public SCInterface getSCInterface() {
		return sCInterface;
	}
	
	public synchronized void raiseChoice() {
		sCInterface.raiseChoice();
	}
	
	public synchronized void raiseAmountVerified() {
		sCInterface.raiseAmountVerified();
	}
	
	public synchronized void raiseCanceled() {
		sCInterface.raiseCanceled();
	}
	
	public synchronized void raiseMoneyGiven() {
		sCInterface.raiseMoneyGiven();
	}
	
	public synchronized void raiseAny() {
		sCInterface.raiseAny();
	}
	
	public synchronized void raiseReset() {
		sCInterface.raiseReset();
	}
	
	public synchronized void raisePaid() {
		sCInterface.raisePaid();
	}
	
	public synchronized void raiseFinish() {
		sCInterface.raiseFinish();
	}
	
	public synchronized boolean isRaisedPay() {
		return sCInterface.isRaisedPay();
	}
	
	public synchronized boolean isRaisedRefund() {
		return sCInterface.isRaisedRefund();
	}
	
	public synchronized boolean isRaisedGiveChange() {
		return sCInterface.isRaisedGiveChange();
	}
	
	public synchronized boolean isRaisedCheckAmount() {
		return sCInterface.isRaisedCheckAmount();
	}
	
	public synchronized boolean isRaisedCancel() {
		return sCInterface.isRaisedCancel();
	}
	
	public synchronized boolean isRaisedStartRecipe() {
		return sCInterface.isRaisedStartRecipe();
	}
	
	public synchronized boolean isRaisedClean() {
		return sCInterface.isRaisedClean();
	}
	
	public synchronized boolean isRaisedRestart() {
		return sCInterface.isRaisedRestart();
	}
	
	/* Entry action for state 'Present'. */
	private void entryAction_activity_Present() {
		timer.setTimer(this, 0, (10 * 1000), false);
	}
	
	/* Exit action for state 'Present'. */
	private void exitAction_activity_Present() {
		timer.unsetTimer(this, 0);
	}
	
	/* 'default' enter sequence for state Chosen */
	private void enterSequence_main_region_ChoiceState_r1_Chosen_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_ChoiceState_r1_Chosen;
	}
	
	/* 'default' enter sequence for state WaitChoice */
	private void enterSequence_main_region_ChoiceState_r1_WaitChoice_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_ChoiceState_r1_WaitChoice;
	}
	
	/* 'default' enter sequence for state Initial */
	private void enterSequence_main_region_ChoiceState_r1_Initial_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_ChoiceState_r1_Initial;
	}
	
	/* 'default' enter sequence for state VerifyAmount */
	private void enterSequence_main_region_ChoiceState_r1_VerifyAmount_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_ChoiceState_r1_VerifyAmount;
	}
	
	/* 'default' enter sequence for state Begin */
	private void enterSequence_main_region_Begin_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Begin;
	}
	
	/* 'default' enter sequence for state Clean */
	private void enterSequence_main_region_Clean_default() {
		nextStateIndex = 0;
		stateVector[0] = State.main_region_Clean;
	}
	
	/* 'default' enter sequence for state NotPaid */
	private void enterSequence_payment_NotPaid_default() {
		nextStateIndex = 1;
		stateVector[1] = State.payment_NotPaid;
	}
	
	/* 'default' enter sequence for state Paid */
	private void enterSequence_payment_Paid_default() {
		nextStateIndex = 1;
		stateVector[1] = State.payment_Paid;
	}
	
	/* 'default' enter sequence for state Present */
	private void enterSequence_activity_Present_default() {
		entryAction_activity_Present();
		nextStateIndex = 2;
		stateVector[2] = State.activity_Present;
	}
	
	/* 'default' enter sequence for state Absent */
	private void enterSequence_activity_Absent_default() {
		nextStateIndex = 2;
		stateVector[2] = State.activity_Absent;
	}
	
	/* 'default' enter sequence for region main region */
	private void enterSequence_main_region_default() {
		react_main_region__entry_Default();
	}
	
	/* 'default' enter sequence for region payment */
	private void enterSequence_payment_default() {
		react_payment__entry_Default();
	}
	
	/* 'default' enter sequence for region activity */
	private void enterSequence_activity_default() {
		react_activity__entry_Default();
	}
	
	/* Default exit sequence for state ChoiceState */
	private void exitSequence_main_region_ChoiceState() {
		exitSequence_main_region_ChoiceState_r1();
	}
	
	/* Default exit sequence for state Chosen */
	private void exitSequence_main_region_ChoiceState_r1_Chosen() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state WaitChoice */
	private void exitSequence_main_region_ChoiceState_r1_WaitChoice() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Initial */
	private void exitSequence_main_region_ChoiceState_r1_Initial() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state VerifyAmount */
	private void exitSequence_main_region_ChoiceState_r1_VerifyAmount() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Begin */
	private void exitSequence_main_region_Begin() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state Clean */
	private void exitSequence_main_region_Clean() {
		nextStateIndex = 0;
		stateVector[0] = State.$NullState$;
	}
	
	/* Default exit sequence for state NotPaid */
	private void exitSequence_payment_NotPaid() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Paid */
	private void exitSequence_payment_Paid() {
		nextStateIndex = 1;
		stateVector[1] = State.$NullState$;
	}
	
	/* Default exit sequence for state Present */
	private void exitSequence_activity_Present() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
		
		exitAction_activity_Present();
	}
	
	/* Default exit sequence for state Absent */
	private void exitSequence_activity_Absent() {
		nextStateIndex = 2;
		stateVector[2] = State.$NullState$;
	}
	
	/* Default exit sequence for region main region */
	private void exitSequence_main_region() {
		switch (stateVector[0]) {
		case main_region_ChoiceState_r1_Chosen:
			exitSequence_main_region_ChoiceState_r1_Chosen();
			break;
		case main_region_ChoiceState_r1_WaitChoice:
			exitSequence_main_region_ChoiceState_r1_WaitChoice();
			break;
		case main_region_ChoiceState_r1_Initial:
			exitSequence_main_region_ChoiceState_r1_Initial();
			break;
		case main_region_ChoiceState_r1_VerifyAmount:
			exitSequence_main_region_ChoiceState_r1_VerifyAmount();
			break;
		case main_region_Begin:
			exitSequence_main_region_Begin();
			break;
		case main_region_Clean:
			exitSequence_main_region_Clean();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region r1 */
	private void exitSequence_main_region_ChoiceState_r1() {
		switch (stateVector[0]) {
		case main_region_ChoiceState_r1_Chosen:
			exitSequence_main_region_ChoiceState_r1_Chosen();
			break;
		case main_region_ChoiceState_r1_WaitChoice:
			exitSequence_main_region_ChoiceState_r1_WaitChoice();
			break;
		case main_region_ChoiceState_r1_Initial:
			exitSequence_main_region_ChoiceState_r1_Initial();
			break;
		case main_region_ChoiceState_r1_VerifyAmount:
			exitSequence_main_region_ChoiceState_r1_VerifyAmount();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region payment */
	private void exitSequence_payment() {
		switch (stateVector[1]) {
		case payment_NotPaid:
			exitSequence_payment_NotPaid();
			break;
		case payment_Paid:
			exitSequence_payment_Paid();
			break;
		default:
			break;
		}
	}
	
	/* Default exit sequence for region activity */
	private void exitSequence_activity() {
		switch (stateVector[2]) {
		case activity_Present:
			exitSequence_activity_Present();
			break;
		case activity_Absent:
			exitSequence_activity_Absent();
			break;
		default:
			break;
		}
	}
	
	/* Default react sequence for initial entry  */
	private void react_main_region__entry_Default() {
		enterSequence_main_region_ChoiceState_r1_Initial_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_payment__entry_Default() {
		enterSequence_payment_NotPaid_default();
	}
	
	/* Default react sequence for initial entry  */
	private void react_activity__entry_Default() {
		enterSequence_activity_Absent_default();
	}
	
	private boolean react() {
		return false;
	}
	
	private boolean main_region_ChoiceState_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.canceled) {
				exitSequence_main_region_ChoiceState();
				sCInterface.raiseRestart();
				
				enterSequence_main_region_ChoiceState_r1_Initial_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_ChoiceState_r1_Chosen_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.paid) {
				exitSequence_main_region_ChoiceState_r1_Chosen();
				sCInterface.raiseCheckAmount();
				
				enterSequence_main_region_ChoiceState_r1_VerifyAmount_default();
				main_region_ChoiceState_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_ChoiceState_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_ChoiceState_r1_WaitChoice_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.choice) {
				exitSequence_main_region_ChoiceState_r1_WaitChoice();
				sCInterface.raiseCheckAmount();
				
				enterSequence_main_region_ChoiceState_r1_VerifyAmount_default();
				main_region_ChoiceState_react(false);
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_ChoiceState_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_ChoiceState_r1_Initial_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.choice) {
				exitSequence_main_region_ChoiceState_r1_Initial();
				enterSequence_main_region_ChoiceState_r1_Chosen_default();
				main_region_ChoiceState_react(false);
			} else {
				if (sCInterface.paid) {
					exitSequence_main_region_ChoiceState_r1_Initial();
					enterSequence_main_region_ChoiceState_r1_WaitChoice_default();
					main_region_ChoiceState_react(false);
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = main_region_ChoiceState_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_ChoiceState_r1_VerifyAmount_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.amountVerified) {
				exitSequence_main_region_ChoiceState();
				sCInterface.raiseStartRecipe();
				
				enterSequence_main_region_Begin_default();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = main_region_ChoiceState_react(try_transition);
		}
		return did_transition;
	}
	
	private boolean main_region_Begin_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.finish) {
				exitSequence_main_region_Begin();
				sCInterface.raiseClean();
				
				enterSequence_main_region_Clean_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean main_region_Clean_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.reset) {
				exitSequence_main_region_Clean();
				sCInterface.raiseRestart();
				
				enterSequence_main_region_ChoiceState_r1_Initial_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean payment_NotPaid_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.moneyGiven) {
				exitSequence_payment_NotPaid();
				sCInterface.raisePay();
				
				enterSequence_payment_Paid_default();
			} else {
				did_transition = false;
			}
		}
		return did_transition;
	}
	
	private boolean payment_Paid_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.canceled) {
				exitSequence_payment_Paid();
				sCInterface.raiseRefund();
				
				enterSequence_payment_NotPaid_default();
			} else {
				if (sCInterface.reset) {
					exitSequence_payment_Paid();
					sCInterface.raiseGiveChange();
					
					enterSequence_payment_NotPaid_default();
				} else {
					did_transition = false;
				}
			}
		}
		return did_transition;
	}
	
	private boolean activity_Present_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (timeEvents[0]) {
				exitSequence_activity_Present();
				sCInterface.raiseCancel();
				
				enterSequence_activity_Absent_default();
				react();
			} else {
				if (sCInterface.any) {
					exitSequence_activity_Present();
					enterSequence_activity_Present_default();
					react();
				} else {
					did_transition = false;
				}
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
	private boolean activity_Absent_react(boolean try_transition) {
		boolean did_transition = try_transition;
		
		if (try_transition) {
			if (sCInterface.any) {
				exitSequence_activity_Absent();
				enterSequence_activity_Present_default();
				react();
			} else {
				did_transition = false;
			}
		}
		if (did_transition==false) {
			did_transition = react();
		}
		return did_transition;
	}
	
}
